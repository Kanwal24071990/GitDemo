// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationTesting_CorConnect.Features.BulkActions
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BulkAction-Reversal")]
    public partial class BulkAction_ReversalFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "BulkAction-Reversal.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/BulkActions", "BulkAction-Reversal", "As a user i want to verify bulk reversal functionality", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("User \"Admin\" is on \"Bulk Actions\" popup page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Submitting template without mandatory fields")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("CON-25452")]
        [NUnit.Framework.CategoryAttribute("CON-27956")]
        [NUnit.Framework.CategoryAttribute("CON-27957")]
        [NUnit.Framework.CategoryAttribute("CON-27958")]
        [NUnit.Framework.CategoryAttribute("CON-27959")]
        [NUnit.Framework.CategoryAttribute("CON-27960")]
        [NUnit.Framework.CategoryAttribute("CON-27961")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.TestCaseAttribute("Invoice Number", null)]
        [NUnit.Framework.TestCaseAttribute("Dealer Code", null)]
        [NUnit.Framework.TestCaseAttribute("Fleet Code", null)]
        [NUnit.Framework.TestCaseAttribute("Approver", null)]
        [NUnit.Framework.TestCaseAttribute("Reason", null)]
        [NUnit.Framework.TestCaseAttribute("Dont Reverse Fees", null)]
        [NUnit.Framework.TestCaseAttribute("Send Notification", null)]
        public void SubmittingTemplateWithoutMandatoryFields(string columnname, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BulkActions",
                    "Functional",
                    "Smoke",
                    "CON-25452",
                    "CON-27956",
                    "CON-27957",
                    "CON-27958",
                    "CON-27959",
                    "CON-27960",
                    "CON-27961",
                    "20.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("columnname", columnname);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submitting template without mandatory fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 11
 testRunner.Given(string.Format("File with {0} is uploaded for \"Invoice Reversal\"", columnname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.When(string.Format("File with {0} submitted for \"Invoice Reversal\"", columnname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then(string.Format("Message Mandatory field {0} For Bulk Reversal should appear", columnname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Duplicate invoice number cannot be submitted")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("CON-25452")]
        [NUnit.Framework.CategoryAttribute("CON-27945")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        public void DuplicateInvoiceNumberCannotBeSubmitted()
        {
            string[] tagsOfScenario = new string[] {
                    "BulkActions",
                    "Functional",
                    "Smoke",
                    "CON-25452",
                    "CON-27945",
                    "20.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duplicate invoice number cannot be submitted", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 27
 testRunner.Given("File with Duplicate Invoice Number is uploaded for \"Invoice Reversal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
 testRunner.When("File with \"Duplicate Invoice Number\" submitted for \"Invoice Reversal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.Then("Message \"Duplicate Invoices For Bulk Reversal\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify bulk action reversal when file uploaded with no records")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("CON-25452")]
        [NUnit.Framework.CategoryAttribute("CON-27946")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        public void VerifyBulkActionReversalWhenFileUploadedWithNoRecords()
        {
            string[] tagsOfScenario = new string[] {
                    "BulkActions",
                    "Functional",
                    "Smoke",
                    "CON-25452",
                    "CON-27946",
                    "20.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify bulk action reversal when file uploaded with no records", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 34
 testRunner.Given("File with No Records is uploaded for \"Invoice Reversal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
 testRunner.Then("Message \"FileIsEmpty\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify bulk action reversal with multiple errors(Duplicate Invoice Number , Manda" +
            "tory Field Empty)")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("CON-25452")]
        [NUnit.Framework.CategoryAttribute("CON-27947")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        public void VerifyBulkActionReversalWithMultipleErrorsDuplicateInvoiceNumberMandatoryFieldEmpty()
        {
            string[] tagsOfScenario = new string[] {
                    "BulkActions",
                    "Functional",
                    "Smoke",
                    "CON-25452",
                    "CON-27947",
                    "20.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify bulk action reversal with multiple errors(Duplicate Invoice Number , Manda" +
                    "tory Field Empty)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 40
 testRunner.Given("File with Multiple Errors Bulk Reversal is uploaded for \"Invoice Reversal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.When("File with \"Multiple Errors Bulk Reversal\" submitted for \"Invoice Reversal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then("Message \"Multiple Error For Bulk Reversal\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify empty excel file uploaded for bulk action reversal")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("CON-25452")]
        [NUnit.Framework.CategoryAttribute("CON-27948")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        public void VerifyEmptyExcelFileUploadedForBulkActionReversal()
        {
            string[] tagsOfScenario = new string[] {
                    "BulkActions",
                    "Functional",
                    "Smoke",
                    "CON-25452",
                    "CON-27948",
                    "20.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify empty excel file uploaded for bulk action reversal", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 47
 testRunner.Given("File with Blank File is uploaded for \"Invoice Reversal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
 testRunner.Then("Message \"FileIsEmpty\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Invalid Format file is not Uploaded for Bulk Action Invoice Reversal")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("CON-25452")]
        [NUnit.Framework.CategoryAttribute("CON-27962")]
        [NUnit.Framework.CategoryAttribute("CON-27963")]
        [NUnit.Framework.CategoryAttribute("CON-27964")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.TestCaseAttribute("Doc", null)]
        [NUnit.Framework.TestCaseAttribute("Docx", null)]
        [NUnit.Framework.TestCaseAttribute("PDF", null)]
        public void VerifyInvalidFormatFileIsNotUploadedForBulkActionInvoiceReversal(string invalidextensionfile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BulkActions",
                    "Functional",
                    "Smoke",
                    "CON-25452",
                    "CON-27962",
                    "CON-27963",
                    "CON-27964",
                    "20.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("invalidextensionfile", invalidextensionfile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Invalid Format file is not Uploaded for Bulk Action Invoice Reversal", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 53
 testRunner.When(string.Format("File with {0} is uploaded for \"Invoice Reversal\"", invalidextensionfile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
 testRunner.Then("Message \"FileExtensionIsNotAllowed\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify bulk action reversal when headers on 5th row")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("CON-25452")]
        [NUnit.Framework.CategoryAttribute("CON-27949")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        public void VerifyBulkActionReversalWhenHeadersOn5ThRow()
        {
            string[] tagsOfScenario = new string[] {
                    "BulkActions",
                    "Functional",
                    "Smoke",
                    "CON-25452",
                    "CON-27949",
                    "20.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify bulk action reversal when headers on 5th row", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 64
 testRunner.When("File with Header On 5th Row is uploaded for \"Invoice Reversal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.Then("Message \"Upload Success\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify download template should be sucessful")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("CON-25452")]
        [NUnit.Framework.CategoryAttribute("CON-27951")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        public void VerifyDownloadTemplateShouldBeSucessful()
        {
            string[] tagsOfScenario = new string[] {
                    "BulkActions",
                    "Functional",
                    "Smoke",
                    "CON-25452",
                    "CON-27951",
                    "20.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify download template should be sucessful", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 69
 testRunner.When("\"Invoice Reversal\" template is downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
 testRunner.Then("Invoice Reversal template is downloaded successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify file should be sucessfully uploaded")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("CON-25452")]
        [NUnit.Framework.CategoryAttribute("CON-27951")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        public void VerifyFileShouldBeSucessfullyUploaded()
        {
            string[] tagsOfScenario = new string[] {
                    "BulkActions",
                    "Functional",
                    "Smoke",
                    "CON-25452",
                    "CON-27951",
                    "20.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify file should be sucessfully uploaded", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 75
 testRunner.Given("File with Sample Bulk Reversal is uploaded for \"Invoice Reversal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
 testRunner.Then("Message \"Upload Success\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify valid file should be processed after submitting")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("CON-25452")]
        [NUnit.Framework.CategoryAttribute("CON-27953")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        public void VerifyValidFileShouldBeProcessedAfterSubmitting()
        {
            string[] tagsOfScenario = new string[] {
                    "BulkActions",
                    "Functional",
                    "Smoke",
                    "CON-25452",
                    "CON-27953",
                    "20.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify valid file should be processed after submitting", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 80
 testRunner.Given("File with Sample Bulk Reversal is uploaded for \"Invoice Reversal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 81
 testRunner.When("File with \"Sample Bulk Reversal\" submitted for \"Invoice Reversal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
 testRunner.Then("Message \"Invoice submitted successfully\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All fields on file should be empty when hitting submit")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("CON-25452")]
        [NUnit.Framework.CategoryAttribute("CON-27954")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        public void AllFieldsOnFileShouldBeEmptyWhenHittingSubmit()
        {
            string[] tagsOfScenario = new string[] {
                    "BulkActions",
                    "Functional",
                    "Smoke",
                    "CON-25452",
                    "CON-27954",
                    "20.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All fields on file should be empty when hitting submit", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 87
 testRunner.Given("File with Sample Bulk Reversal is uploaded for \"Invoice Reversal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
 testRunner.When("File with \"Sample Bulk Reversal\" submitted for \"Invoice Reversal\" without mapping" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
 testRunner.Then("Field on File required message should appear for \"Invoice Reversal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Unable to submit if file is not uploaded")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("CON-25452")]
        [NUnit.Framework.CategoryAttribute("CON-27955")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        public void VerifyUnableToSubmitIfFileIsNotUploaded()
        {
            string[] tagsOfScenario = new string[] {
                    "BulkActions",
                    "Functional",
                    "Smoke",
                    "CON-25452",
                    "CON-27955",
                    "20.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Unable to submit if file is not uploaded", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 94
 testRunner.When("Submission is performed on \"Invoice Reversal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
 testRunner.Then("Message \"Upload File To Proceed\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
