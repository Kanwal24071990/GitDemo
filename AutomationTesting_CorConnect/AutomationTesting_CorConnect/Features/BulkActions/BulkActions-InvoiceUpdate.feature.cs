// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationTesting_CorConnect.Features.BulkActions
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Bulk Actions Invoice Update")]
    public partial class BulkActionsInvoiceUpdateFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "BulkActions-InvoiceUpdate.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/BulkActions", "Bulk Actions Invoice Update", "As a user i want to verify bulk Invoice Update functionality", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("User \"Admin\" is on \"Bulk Actions\" popup page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify file with Only1HeaderRow Uploaded for Bulk Action Invoice Update")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyFileWithOnly1HeaderRowUploadedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify file with Only1HeaderRow Uploaded for Bulk Action Invoice Update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 10
 testRunner.When("File with Only1HeaderRow is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then("Message \"FileIsEmpty\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify NoHeaderNoData file Uploaded for Bulk Action Invoice Update")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyNoHeaderNoDataFileUploadedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify NoHeaderNoData file Uploaded for Bulk Action Invoice Update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 15
 testRunner.When("File with NoHeaderNoData is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
 testRunner.Then("Message \"FileIsEmpty\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify 1Header1DataRows file Uploaded for Bulk Action Invoice Update")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void Verify1Header1DataRowsFileUploadedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify 1Header1DataRows file Uploaded for Bulk Action Invoice Update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 20
 testRunner.When("File with 1Header1DataRows is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.When("File with 1Header1DataRows submitted for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("Message \"ProgramInvoiceNumberAndAtLeastOneValueError\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify 2HeaderNoDataRows file Uploaded for Bulk Action Invoice Update")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void Verify2HeaderNoDataRowsFileUploadedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify 2HeaderNoDataRows file Uploaded for Bulk Action Invoice Update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 26
 testRunner.When("File with 2HeaderNoDataRows is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.Then("Message \"FileIsEmpty\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify AllHeaderNoDataRows file Uploaded for Bulk Action Invoice Update")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyAllHeaderNoDataRowsFileUploadedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify AllHeaderNoDataRows file Uploaded for Bulk Action Invoice Update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 31
 testRunner.When("File with AllHeaderNoDataRows is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then("Message \"FileIsEmpty\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify 2Header2DataRows file Uploaded for Bulk Action Invoice Update")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void Verify2Header2DataRowsFileUploadedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify 2Header2DataRows file Uploaded for Bulk Action Invoice Update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 36
 testRunner.When("File with 2Header2DataRows is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.Then("Message \"FileHasBeenProcessedAndUploadedSuccessfully\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify AllHeaderN2DataRows file Uploaded for Bulk Action Invoice Update")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyAllHeaderN2DataRowsFileUploadedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify AllHeaderN2DataRows file Uploaded for Bulk Action Invoice Update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 41
 testRunner.When("File with AllHeaderN2DataRows is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.When("File with AllHeaderN2DataRows submitted for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then("Message \"InvoiceUpdateStatusWillBeSendByEmail\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Invalid File Format is not Uploaded for Bulk Action Invoice Update")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        [NUnit.Framework.TestCaseAttribute("PDF", null)]
        [NUnit.Framework.TestCaseAttribute("DOC", null)]
        public void VerifyInvalidFileFormatIsNotUploadedForBulkActionInvoiceUpdate(string fileFormate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FileFormate", fileFormate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Invalid File Format is not Uploaded for Bulk Action Invoice Update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 47
 testRunner.When(string.Format("File with {0} is uploaded for \"Invoice Update\"", fileFormate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
 testRunner.Then("Message \"FileExtensionIsNotAllowed\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Missing Invoice Number file Uploaded & unable to submit for Bulk Action In" +
            "voice Update")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyMissingInvoiceNumberFileUploadedUnableToSubmitForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Missing Invoice Number file Uploaded & unable to submit for Bulk Action In" +
                    "voice Update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 57
 testRunner.Given("File with EmptyInvoiceNumber is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
 testRunner.When("File with \"EmptyInvoiceNumber\" submitted for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then("Message \"EmptyInvoiceNumber\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify file with Duplicate Invoice Number is submitted for Bulk Action Invoice Up" +
            "date")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyFileWithDuplicateInvoiceNumberIsSubmittedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify file with Duplicate Invoice Number is submitted for Bulk Action Invoice Up" +
                    "date", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 63
 testRunner.Given("File with DuplicateInvoiceNumber is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 64
 testRunner.When("File with \"DuplicateInvoiceNumber\" submitted for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.Then("Message \"DuplicateInvoiceNumber\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify file with MultipleErrors submitted for Bulk Action Invoice Update")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyFileWithMultipleErrorsSubmittedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify file with MultipleErrors submitted for Bulk Action Invoice Update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 69
 testRunner.Given("File with MultipleErrors is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
 testRunner.When("File with \"MultipleErrors\" submitted for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
 testRunner.Then("Message \"MultipleErrors\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verfiy all fields are mapped properly on gui & Program Invoice Number is disabled" +
            "")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerfiyAllFieldsAreMappedProperlyOnGuiProgramInvoiceNumberIsDisabled()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verfiy all fields are mapped properly on gui & Program Invoice Number is disabled" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 75
 testRunner.When("File with AllHeaderN2DataRows is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
 testRunner.Then("All fields should be displayed & Program Invoice Number should be disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify unable to submit if file is not uploaded for Bulk Action Invoice Update")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyUnableToSubmitIfFileIsNotUploadedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify unable to submit if file is not uploaded for Bulk Action Invoice Update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 80
 testRunner.When("Submission is performed on \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("Message \"Upload File To Proceed\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify file with Max PO chars is submitted for Bulk Action Invoice Update")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyFileWithMaxPOCharsIsSubmittedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify file with Max PO chars is submitted for Bulk Action Invoice Update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 85
 testRunner.Given("File with MaxPOChars is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
 testRunner.When("File with \"MaxPOChars\" submitted for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
 testRunner.Then("Message \"PONumbersMaxLimit\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify file with Max Vehicle Id chars is submitted for Bulk Action Invoice Update" +
            "")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyFileWithMaxVehicleIdCharsIsSubmittedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify file with Max Vehicle Id chars is submitted for Bulk Action Invoice Update" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 91
 testRunner.Given("File with MaxVehicleIdChars is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 92
 testRunner.When("File with \"MaxVehicleIdChars\" submitted for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
 testRunner.Then("Message \"VehicleIdMaxLimit\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify file with Max Unit Number chars is submitted for Bulk Action Invoice Updat" +
            "e")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyFileWithMaxUnitNumberCharsIsSubmittedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify file with Max Unit Number chars is submitted for Bulk Action Invoice Updat" +
                    "e", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 97
 testRunner.Given("File with MaxUnitNumberChars is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
 testRunner.When("File with \"MaxUnitNumberChars\" submitted for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
 testRunner.Then("Message \"UnitNumberMaxLimit\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify file with Max Vin Number chars is submitted for Bulk Action Invoice Update" +
            "")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyFileWithMaxVinNumberCharsIsSubmittedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify file with Max Vin Number chars is submitted for Bulk Action Invoice Update" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 103
 testRunner.Given("File with MaxVinNumberChars is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 104
 testRunner.When("File with \"MaxVinNumberChars\" submitted for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
 testRunner.Then("Message \"VinNumberMaxLimit\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify file with Max Vehicle Mileage chars is submitted for Bulk Action Invoice U" +
            "pdate")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyFileWithMaxVehicleMileageCharsIsSubmittedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify file with Max Vehicle Mileage chars is submitted for Bulk Action Invoice U" +
                    "pdate", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 109
 testRunner.Given("File with MaxVehicleMileageChars is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 110
 testRunner.When("File with \"MaxVehicleMileageChars\" submitted for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 111
 testRunner.Then("Message \"MaxVehicleMaxLimit\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify file with Max Ref Number chars is submitted for Bulk Action Invoice Update" +
            "")]
        [NUnit.Framework.CategoryAttribute("CON-26779")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.CategoryAttribute("BulkActions")]
        public void VerifyFileWithMaxRefNumberCharsIsSubmittedForBulkActionInvoiceUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26779",
                    "Smoke",
                    "Functional",
                    "20.0",
                    "BulkActions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify file with Max Ref Number chars is submitted for Bulk Action Invoice Update" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 115
 testRunner.Given("File with MaxRefNumberChars is uploaded for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 116
 testRunner.When("File with \"MaxRefNumberChars\" submitted for \"Invoice Update\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
 testRunner.Then("Message \"RefNumberMaxLimit\" should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
