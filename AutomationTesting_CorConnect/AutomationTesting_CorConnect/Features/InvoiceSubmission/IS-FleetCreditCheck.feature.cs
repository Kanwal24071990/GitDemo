// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationTesting_CorConnect.Features.InvoiceSubmission
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("IS-FleetCreditCheck")]
    [NUnit.Framework.CategoryAttribute("IS-FleetCreditCheck")]
    public partial class IS_FleetCreditCheckFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "IS-FleetCreditCheck"};
        
#line 1 "IS-FleetCreditCheck.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/InvoiceSubmission", "IS-FleetCreditCheck", "As a user i want to verify fleet credit limit check with fleet non-corcentric loc" +
                    "ations ", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("User \"Admin\" logs in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice bypass credit not available discrepancy when financial handling is commun" +
            "ity from UI")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("InvoiceEntry")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingIsCommunityFromUI()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "InvoiceEntry",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice bypass credit not available discrepancy when financial handling is commun" +
                    "ity from UI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 12
    testRunner.Given("Fleet \"byrShFinCom\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
    testRunner.When("invoice is sucessfully created using Dealer \"SupShFinCom\" and Fleet \"byrShFinCom\"" +
                        " with invoice type \"Parts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"byrShFinCom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice bypass credit not available discrepancy when financial handling is Pcard " +
            "from UI")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("InvoiceEntry")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingIsPcardFromUI()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "InvoiceEntry",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice bypass credit not available discrepancy when financial handling is Pcard " +
                    "from UI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 21
    testRunner.Given("Fleet \"byrShFinPca\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
    testRunner.When("invoice is sucessfully created using Dealer \"SupShFinPca\" and Fleet \"byrShFinPca\"" +
                        " with invoice type \"Parts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
    testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"byrShFinPca\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice bypass credit not available discrepancy when financial handling is Report" +
            "ing only from UI")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("InvoiceEntry")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingIsReportingOnlyFromUI()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "InvoiceEntry",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice bypass credit not available discrepancy when financial handling is Report" +
                    "ing only from UI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 30
    testRunner.Given("Fleet \"byrShFinRep\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
    testRunner.When("invoice is sucessfully created using Dealer \"SupShFinRep\" and Fleet \"byrShFinRep\"" +
                        " with invoice type \"Parts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
    testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"byrShFinRep\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice bypass credit not available discrepancy when financial handling is commun" +
            "ity and payment method is pcard from UI")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("InvoiceEntry")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingIsCommunityAndPaymentMethodIsPcardFromUI()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "InvoiceEntry",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice bypass credit not available discrepancy when financial handling is commun" +
                    "ity and payment method is pcard from UI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 39
    testRunner.Given("Fleet \"byrSh4FinRep\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
    testRunner.When("invoice is sucessfully created using Dealer \"SupSh4FinRep\" and Fleet \"byrSh4FinRe" +
                        "p\" with invoice type \"Parts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
    testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"byrSh4FinRep\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice bypass credit not available discrepancy when payment method is pcard from" +
            " UI")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("InvoiceEntry")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceBypassCreditNotAvailableDiscrepancyWhenPaymentMethodIsPcardFromUI()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "InvoiceEntry",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice bypass credit not available discrepancy when payment method is pcard from" +
                    " UI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 48
 testRunner.Given("Fleet \"ByrblgUSD1\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 49
    testRunner.When("invoice is sucessfully created using Dealer \"SupBlgUSD1\" and Fleet \"ByrblgUSD1\" w" +
                        "ith invoice type \"Parts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
    testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"ByrblgUSD1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Account Configuration When Financial Handling Relation" +
            "ship is Community")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AccountConfiguration")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("UAT")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnAccountConfigurationWhenFinancialHandlingRelationshipIsCommunity(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AccountConfiguration",
                    "CreditValidation",
                    "QAFunctional",
                    "UAT"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Account Configuration When Financial Handling Relation" +
                    "ship is Community", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 56
 testRunner.Given("User navigates to \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
 testRunner.And(string.Format("Fleet \"byrShFinCom\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.When("Search fleet \"byrShFinCom\" on \"Account Maintenance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then("credit limit should be 0 on \"Account Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Account Configuration When Financial Handling Relation" +
            "ship is Pcard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AccountConfiguration")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnAccountConfigurationWhenFinancialHandlingRelationshipIsPcard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AccountConfiguration",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Account Configuration When Financial Handling Relation" +
                    "ship is Pcard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 69
 testRunner.Given("User navigates to \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
 testRunner.And(string.Format("Fleet \"byrShFinPca\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.When("Search fleet \"byrShFinPca\" on \"Account Maintenance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.Then("credit limit should be 0 on \"Account Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Account Configuration When Financial Handling Relation" +
            "ship is Reporting Only")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AccountConfiguration")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnAccountConfigurationWhenFinancialHandlingRelationshipIsReportingOnly(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AccountConfiguration",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Account Configuration When Financial Handling Relation" +
                    "ship is Reporting Only", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 82
 testRunner.Given("User navigates to \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
 testRunner.And(string.Format("Fleet \"byrShFinRep\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.When("Search fleet \"byrShFinRep\" on \"Account Maintenance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
 testRunner.Then("credit limit should be 0 on \"Account Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Fleet Credit Limit Page When Financial Handling Relati" +
            "onship is Community")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("FleetCreditLimit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnFleetCreditLimitPageWhenFinancialHandlingRelationshipIsCommunity(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "FleetCreditLimit",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Fleet Credit Limit Page When Financial Handling Relati" +
                    "onship is Community", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 95
 testRunner.Given("User navigates to \"Fleet Credit Limit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
 testRunner.And(string.Format("Fleet \"byrShFinCom\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.When("Search fleet \"byrShFinCom\" on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
 testRunner.Then("credit limit should be 0 on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Fleet Credit Limit Page When Financial Handling Relati" +
            "onship is PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("FleetCreditLimit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("UAT")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnFleetCreditLimitPageWhenFinancialHandlingRelationshipIsPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "FleetCreditLimit",
                    "CreditValidation",
                    "QAFunctional",
                    "UAT"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Fleet Credit Limit Page When Financial Handling Relati" +
                    "onship is PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 107
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 108
 testRunner.Given("User navigates to \"Fleet Credit Limit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 109
 testRunner.And(string.Format("Fleet \"byrShFinPca\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
 testRunner.When("Search fleet \"byrShFinPca\" on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 111
 testRunner.Then("credit limit should be 0 on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Fleet Credit Limit Page When Financial Handling Relati" +
            "onship is Reporting Only")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("FleetCreditLimit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnFleetCreditLimitPageWhenFinancialHandlingRelationshipIsReportingOnly(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "FleetCreditLimit",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Fleet Credit Limit Page When Financial Handling Relati" +
                    "onship is Reporting Only", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 120
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 121
 testRunner.Given("User navigates to \"Fleet Credit Limit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 122
 testRunner.And(string.Format("Fleet \"byrShFinRep\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
 testRunner.When("Search fleet \"byrShFinRep\" on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
 testRunner.Then("credit limit should be 0 on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Update Credit Page when Financial Handling Relationshi" +
            "p is Community")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("UpdateCredit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnUpdateCreditPageWhenFinancialHandlingRelationshipIsCommunity(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "UpdateCredit",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Update Credit Page when Financial Handling Relationshi" +
                    "p is Community", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 134
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 135
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 136
 testRunner.And(string.Format("Fleet \"byrShFinCom\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
 testRunner.When("Search fleet \"byrShFinCom\" on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 138
 testRunner.Then("credit limit should be 0 on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Update Credit Page when Financial Handling Relationshi" +
            "p is PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("UpdateCredit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnUpdateCreditPageWhenFinancialHandlingRelationshipIsPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "UpdateCredit",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Update Credit Page when Financial Handling Relationshi" +
                    "p is PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 147
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 148
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 149
 testRunner.And(string.Format("Fleet \"byrShFinPca\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 150
 testRunner.When("Search fleet \"byrShFinPca\" on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 151
 testRunner.Then("credit limit should be 0 on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Update Credit Page when Financial Handling Relationshi" +
            "p is Reporting Only")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("UpdateCredit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnUpdateCreditPageWhenFinancialHandlingRelationshipIsReportingOnly(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "UpdateCredit",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Update Credit Page when Financial Handling Relationshi" +
                    "p is Reporting Only", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 160
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 161
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 162
 testRunner.And(string.Format("Fleet \"byrShFinRep\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
 testRunner.When("Search fleet \"byrShFinRep\" on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 164
 testRunner.Then("credit limit should be 0 on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Update Credit Page when Payment Method Relationship is" +
            " Pcard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("UpdateCredit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("UAT")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnUpdateCreditPageWhenPaymentMethodRelationshipIsPcard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "UpdateCredit",
                    "CreditValidation",
                    "QAFunctional",
                    "UAT"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Update Credit Page when Payment Method Relationship is" +
                    " Pcard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 174
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 175
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 176
 testRunner.And(string.Format("Fleet \"ByrblgUSD1\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
 testRunner.When("Search fleet \"ByrblgUSD1\" on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 178
 testRunner.Then("credit limit should be 0 on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Fleet Credit Limit Page when Payment method Relationsh" +
            "ip is Pcard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("FleetCreditLimit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnFleetCreditLimitPageWhenPaymentMethodRelationshipIsPcard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "FleetCreditLimit",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Fleet Credit Limit Page when Payment method Relationsh" +
                    "ip is Pcard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 188
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 189
 testRunner.Given("User navigates to \"Fleet Credit Limit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 190
 testRunner.And(string.Format("Fleet \"ByrblgUSD1\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 191
 testRunner.When("Search fleet \"ByrblgUSD1\" on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 192
 testRunner.Then("credit limit should be 0 on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Account Configuration when Payment Method Relationship" +
            "\tis PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AccountConfiguration")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnAccountConfigurationWhenPaymentMethodRelationshipIsPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AccountConfiguration",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Account Configuration when Payment Method Relationship" +
                    "\tis PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 201
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 202
 testRunner.Given("User navigates to \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 203
 testRunner.And(string.Format("Fleet \"ByrblgUSD1\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 204
 testRunner.When("Search fleet \"ByrblgUSD1\" on \"Account Maintenance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 205
 testRunner.Then("credit limit should be 0 on \"Account Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Account Configuration when financial handling and paym" +
            "ent method relationship not exist")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AccountConfiguration")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("UAT")]
        public void CreditLimitValidationOnAccountConfigurationWhenFinancialHandlingAndPaymentMethodRelationshipNotExist()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AccountConfiguration",
                    "CreditValidation",
                    "QAFunctional",
                    "UAT"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Account Configuration when financial handling and paym" +
                    "ent method relationship not exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 215
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 216
 testRunner.Given("User navigates to \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 217
 testRunner.And("Fleet \"ByrblgUSD\" Credit Limit is Updated to 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
 testRunner.When("Search fleet \"ByrblgUSD\" on \"Account Maintenance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 219
 testRunner.Then("credit limit should be 100 on \"Account Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Update Credit when financial handling and payment meth" +
            "od relationship not exist")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("UpdateCredit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void CreditLimitValidationOnUpdateCreditWhenFinancialHandlingAndPaymentMethodRelationshipNotExist()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "UpdateCredit",
                    "CreditValidation",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Update Credit when financial handling and payment meth" +
                    "od relationship not exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 224
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 225
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 226
 testRunner.And("Fleet \"ByrblgUSD\" Credit Limit is Updated to 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 227
 testRunner.When("Search fleet \"ByrblgUSD\" on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 228
 testRunner.Then("credit limit should be 100 on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Fleet Credit Limit when financial handling and payment" +
            " method relationship not exist")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("FleetCreditLimit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void CreditLimitValidationOnFleetCreditLimitWhenFinancialHandlingAndPaymentMethodRelationshipNotExist()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "FleetCreditLimit",
                    "CreditValidation",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Fleet Credit Limit when financial handling and payment" +
                    " method relationship not exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 233
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 234
 testRunner.Given("User navigates to \"Fleet Credit Limit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 235
 testRunner.And("Fleet \"ByrblgUSD\" Credit Limit is Updated to 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 236
 testRunner.When("Search fleet \"ByrblgUSD\" on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 237
 testRunner.Then("credit limit should be 100 on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Account Configuration when Financial Handling Relation" +
            "ship is Corcentric")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AccountConfiguration")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void CreditLimitValidationOnAccountConfigurationWhenFinancialHandlingRelationshipIsCorcentric()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AccountConfiguration",
                    "CreditValidation",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Account Configuration when Financial Handling Relation" +
                    "ship is Corcentric", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 242
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 243
 testRunner.Given("User navigates to \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 244
 testRunner.And("Fleet \"byrShFinCor1\" Credit Limit is Updated to -100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 245
 testRunner.When("Search fleet \"byrShFinCor1\" on \"Account Maintenance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 246
 testRunner.Then("credit limit should be -100 on \"Account Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Fleet Credit Limit Page when Financial Handling Relati" +
            "onship is Corcentric")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("FleetCreditLimit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("UAT")]
        public void CreditLimitValidationOnFleetCreditLimitPageWhenFinancialHandlingRelationshipIsCorcentric()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "FleetCreditLimit",
                    "CreditValidation",
                    "QAFunctional",
                    "UAT"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Fleet Credit Limit Page when Financial Handling Relati" +
                    "onship is Corcentric", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 251
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 252
 testRunner.Given("User navigates to \"Fleet Credit Limit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 253
 testRunner.And("Fleet \"byrShFinCor1\" Credit Limit is Updated to -100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 254
 testRunner.When("Search fleet \"byrShFinCor1\" on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 255
 testRunner.Then("credit limit should be -100 on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Update Credit Page when Financial Handling Relationshi" +
            "p is Corcentric")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("UpdateCredit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void CreditLimitValidationOnUpdateCreditPageWhenFinancialHandlingRelationshipIsCorcentric()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "UpdateCredit",
                    "CreditValidation",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Update Credit Page when Financial Handling Relationshi" +
                    "p is Corcentric", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 260
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 261
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 262
 testRunner.And("Fleet \"byrShFinCor1\" Credit Limit is Updated to -100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
 testRunner.When("Search fleet \"byrShFinCor1\" on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 264
 testRunner.Then("credit limit should be -100 on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Fleet Credit Limit Page Financial Handling is Corcentr" +
            "ic and Payment Method is PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("FleetCreditLimit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("UAT")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnFleetCreditLimitPageFinancialHandlingIsCorcentricAndPaymentMethodIsPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "FleetCreditLimit",
                    "CreditValidation",
                    "QAFunctional",
                    "UAT"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Fleet Credit Limit Page Financial Handling is Corcentr" +
                    "ic and Payment Method is PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 269
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 270
 testRunner.Given("User navigates to \"Fleet Credit Limit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 271
 testRunner.And(string.Format("Fleet \"byrSh1FinCor\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 272
 testRunner.When("Search fleet \"byrSh1FinCor\" on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 273
 testRunner.Then("credit limit should be 0 on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Credit Limit for fleet when financial handling relationship is corcentric")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("Update")]
        [NUnit.Framework.CategoryAttribute("UpdateCredit")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void UpdateCreditLimitForFleetWhenFinancialHandlingRelationshipIsCorcentric(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "Update",
                    "UpdateCredit",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Credit Limit for fleet when financial handling relationship is corcentric", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 282
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 283
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 284
 testRunner.And(string.Format("Fleet \"byrShFinCor1\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 285
 testRunner.When("User \"should\" be able to update credit to 500  for fleet \"byrShFinCor1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 286
 testRunner.Then("Credit limit 500 should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Credit Limit for fleet when financial handling and payment method relation" +
            "ship does not exist")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("Update")]
        [NUnit.Framework.CategoryAttribute("UpdateCredit")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void UpdateCreditLimitForFleetWhenFinancialHandlingAndPaymentMethodRelationshipDoesNotExist(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "Update",
                    "UpdateCredit",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Credit Limit for fleet when financial handling and payment method relation" +
                    "ship does not exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 296
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 297
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 298
 testRunner.And(string.Format("Fleet \"ByrblgUSD\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 299
 testRunner.When("User \"should\" be able to update credit to 500  for fleet \"ByrblgUSD\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 300
 testRunner.Then("Credit limit 500 should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update credit limit for fleet when payment method relationship is Check")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("Update")]
        [NUnit.Framework.CategoryAttribute("UpdateCredit")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void UpdateCreditLimitForFleetWhenPaymentMethodRelationshipIsCheck(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "Update",
                    "UpdateCredit",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update credit limit for fleet when payment method relationship is Check", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 311
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 312
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 313
 testRunner.And(string.Format("Fleet \"ByrblgUSD\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 314
 testRunner.When("User \"should\" be able to update credit to 500  for fleet \"ByrblgUSD\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 315
 testRunner.Then("Credit limit 500 should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit validation on fleet credit limit page when Financial Handling is PCa" +
            "rd and Payment Method is PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("FleetCreditLimit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnFleetCreditLimitPageWhenFinancialHandlingIsPCardAndPaymentMethodIsPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "FleetCreditLimit",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit validation on fleet credit limit page when Financial Handling is PCa" +
                    "rd and Payment Method is PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 325
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 326
 testRunner.Given("User navigates to \"Fleet Credit Limit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 327
 testRunner.And(string.Format("Fleet \"byrSh2FinCor\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 328
 testRunner.When("Search fleet \"byrSh2FinCor\" on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 329
 testRunner.Then("credit limit should be 0 on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit validation on fleet credit limit page when Financial Handling is Rep" +
            "orting Only and Payment Method is PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("FleetCreditLimit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnFleetCreditLimitPageWhenFinancialHandlingIsReportingOnlyAndPaymentMethodIsPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "FleetCreditLimit",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit validation on fleet credit limit page when Financial Handling is Rep" +
                    "orting Only and Payment Method is PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 339
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 340
 testRunner.Given("User navigates to \"Fleet Credit Limit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 341
 testRunner.And(string.Format("Fleet \"byrSh3FinPca\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 342
 testRunner.When("Search fleet \"byrSh3FinPca\" on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 343
 testRunner.Then("credit limit should be 0 on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit validation on fleet credit limit page when Financial Handling is Com" +
            "munity and Payment Method is PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("FleetCreditLimit")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnFleetCreditLimitPageWhenFinancialHandlingIsCommunityAndPaymentMethodIsPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "FleetCreditLimit",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit validation on fleet credit limit page when Financial Handling is Com" +
                    "munity and Payment Method is PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 353
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 354
 testRunner.Given("User navigates to \"Fleet Credit Limit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 355
 testRunner.And(string.Format("Fleet \"byrSh4FinRep\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 356
 testRunner.When("Search fleet \"byrSh4FinRep\" on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 357
 testRunner.Then("credit limit should be 0 on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Account Configuration when Financial Handling Corcentr" +
            "ic and Payment Method PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AccountConfiguration")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnAccountConfigurationWhenFinancialHandlingCorcentricAndPaymentMethodPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AccountConfiguration",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Account Configuration when Financial Handling Corcentr" +
                    "ic and Payment Method PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 368
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 369
 testRunner.Given("User navigates to \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 370
 testRunner.And(string.Format("Fleet \"byrSh1FinCor\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 371
 testRunner.When("Search fleet \"byrSh1FinCor\" on \"Account Maintenance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 372
 testRunner.Then("credit limit should be 0 on \"Account Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Account Configuration when Financial Handling PCard an" +
            "d Payment Method PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AccountConfiguration")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnAccountConfigurationWhenFinancialHandlingPCardAndPaymentMethodPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AccountConfiguration",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Account Configuration when Financial Handling PCard an" +
                    "d Payment Method PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 381
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 382
 testRunner.Given("User navigates to \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 383
 testRunner.And(string.Format("Fleet \"byrSh2FinCor\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 384
 testRunner.When("Search fleet \"byrSh2FinCor\" on \"Account Maintenance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 385
 testRunner.Then("credit limit should be 0 on \"Account Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Account Configuration when Financial Handling Reportin" +
            "g Only and Payment Method PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AccountConfiguration")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnAccountConfigurationWhenFinancialHandlingReportingOnlyAndPaymentMethodPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AccountConfiguration",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Account Configuration when Financial Handling Reportin" +
                    "g Only and Payment Method PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 394
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 395
 testRunner.Given("User navigates to \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 396
 testRunner.And(string.Format("Fleet \"byrSh3FinPca\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 397
 testRunner.When("Search fleet \"byrSh3FinPca\" on \"Account Maintenance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 398
 testRunner.Then("credit limit should be 0 on \"Account Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Limit Validation on Account Configuration when Financial Handling Communit" +
            "y and Payment Method PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AccountConfiguration")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void CreditLimitValidationOnAccountConfigurationWhenFinancialHandlingCommunityAndPaymentMethodPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AccountConfiguration",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Limit Validation on Account Configuration when Financial Handling Communit" +
                    "y and Payment Method PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 407
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 408
 testRunner.Given("User navigates to \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 409
 testRunner.And(string.Format("Fleet \"byrSh4FinRep\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 410
 testRunner.When("Search fleet \"byrSh4FinRep\" on \"Account Maintenance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 411
 testRunner.Then("credit limit should be 0 on \"Account Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Credit page validation when Financial Handling Corcentric and Payment Meth" +
            "od PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void UpdateCreditPageValidationWhenFinancialHandlingCorcentricAndPaymentMethodPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Credit page validation when Financial Handling Corcentric and Payment Meth" +
                    "od PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 420
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 421
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 422
 testRunner.And(string.Format("Fleet \"byrSh1FinCor\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 423
 testRunner.When("Search fleet \"byrSh1FinCor\" on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 424
 testRunner.Then("credit limit should be 0 on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Credit page validation when Financial Handling PCard and Payment Method PC" +
            "ard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void UpdateCreditPageValidationWhenFinancialHandlingPCardAndPaymentMethodPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Credit page validation when Financial Handling PCard and Payment Method PC" +
                    "ard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 433
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 434
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 435
 testRunner.And(string.Format("Fleet \"byrSh2FinCor\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 436
 testRunner.When("Search fleet \"byrSh2FinCor\" on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 437
 testRunner.Then("credit limit should be 0 on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Credit page validation when Financial Handling Reporting Only and Payment " +
            "Method PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void UpdateCreditPageValidationWhenFinancialHandlingReportingOnlyAndPaymentMethodPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Credit page validation when Financial Handling Reporting Only and Payment " +
                    "Method PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 446
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 447
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 448
 testRunner.And(string.Format("Fleet \"byrSh3FinPca\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 449
 testRunner.When("Search fleet \"byrSh3FinPca\" on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 450
 testRunner.Then("credit limit should be 0 on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Credit page validation when Financial Handling Community and Payment Metho" +
            "d PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("CreditValidation")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void UpdateCreditPageValidationWhenFinancialHandlingCommunityAndPaymentMethodPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "CreditValidation",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Credit page validation when Financial Handling Community and Payment Metho" +
                    "d PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 459
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 460
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 461
 testRunner.And(string.Format("Fleet \"byrSh4FinRep\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 462
 testRunner.When("Search fleet \"byrSh4FinRep\" on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 463
 testRunner.Then("credit limit should be 0 on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unable to update credit when Financial Handling is Corcentric and Payment Method " +
            "is PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("Update")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void UnableToUpdateCreditWhenFinancialHandlingIsCorcentricAndPaymentMethodIsPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "Update",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unable to update credit when Financial Handling is Corcentric and Payment Method " +
                    "is PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 473
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 474
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 475
 testRunner.And(string.Format("Fleet \"byrSh1FinCor\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 476
    testRunner.When("User \"should not\" be able to update credit to 500  for fleet \"byrSh1FinCor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 477
 testRunner.Then("Credit limit 500 should not be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unable to update credit when Financial Handling is PCard and Payment Method is PC" +
            "ard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("Update")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void UnableToUpdateCreditWhenFinancialHandlingIsPCardAndPaymentMethodIsPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "Update",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unable to update credit when Financial Handling is PCard and Payment Method is PC" +
                    "ard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 487
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 488
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 489
 testRunner.And(string.Format("Fleet \"byrSh2FinCor\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 490
    testRunner.When("User \"should not\" be able to update credit to 500  for fleet \"byrSh2FinCor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 491
 testRunner.Then("Credit limit 500 should not be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unable to update credit when Financial Handling is Reporting Only and Payment Met" +
            "hod is PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("Update")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void UnableToUpdateCreditWhenFinancialHandlingIsReportingOnlyAndPaymentMethodIsPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "Update",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unable to update credit when Financial Handling is Reporting Only and Payment Met" +
                    "hod is PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 502
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 503
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 504
 testRunner.And(string.Format("Fleet \"byrSh3FinPca\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 505
    testRunner.When("User \"should not\" be able to update credit to 500  for fleet \"byrSh3FinPca\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 506
 testRunner.Then("Credit limit 500 should not be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unable to update credit  when Financial Handling is Community and Payment Method " +
            "is PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("Update")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        public void UnableToUpdateCreditWhenFinancialHandlingIsCommunityAndPaymentMethodIsPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "Update",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unable to update credit  when Financial Handling is Community and Payment Method " +
                    "is PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 516
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 517
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 518
 testRunner.And(string.Format("Fleet \"byrSh4FinRep\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 519
    testRunner.When("User \"should not\" be able to update credit to 500  for fleet \"byrSh4FinRep\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 520
 testRunner.Then("Credit limit 500 should not be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unable to update credit when Financial Handling is Pcard and Payment Method is ch" +
            "eck")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("Update")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        public void UnableToUpdateCreditWhenFinancialHandlingIsPcardAndPaymentMethodIsCheck(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "Update",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unable to update credit when Financial Handling is Pcard and Payment Method is ch" +
                    "eck", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 530
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 531
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 532
 testRunner.And(string.Format("Fleet \"byrSh5FinCom\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 533
 testRunner.When("User \"should not\" be able to update credit to 500  for fleet \"byrSh5FinCom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 534
 testRunner.Then("Credit limit 500 should not be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Fleet Credit Limit Page validation when Financial Handling is Pcard and Payment M" +
            "ethod is nonPcard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("FleetCreditLimit")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        public void FleetCreditLimitPageValidationWhenFinancialHandlingIsPcardAndPaymentMethodIsNonPcard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "FleetCreditLimit",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fleet Credit Limit Page validation when Financial Handling is Pcard and Payment M" +
                    "ethod is nonPcard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 544
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 545
 testRunner.Given("User navigates to \"Fleet Credit Limit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 546
 testRunner.And(string.Format("Fleet \"byrSh5FinCom\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 547
 testRunner.When("Search fleet \"byrSh5FinCom\" on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 548
 testRunner.Then("credit limit should be 0 on \"Fleet Credit Limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Account Configuration page validation when Financial Handling is Pcard and Paymen" +
            "t Method is nonPcard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AccountConfiguration")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        public void AccountConfigurationPageValidationWhenFinancialHandlingIsPcardAndPaymentMethodIsNonPcard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AccountConfiguration",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Account Configuration page validation when Financial Handling is Pcard and Paymen" +
                    "t Method is nonPcard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 557
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 558
 testRunner.Given("User navigates to \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 559
 testRunner.And(string.Format("Fleet \"ByrblgUSD2\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 560
 testRunner.When("Search fleet \"ByrblgUSD2\" on \"Account Maintenance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 561
 testRunner.Then("credit limit should be 0 on \"Account Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Credit page validation when Financial Handling is community and Payment Me" +
            "thod is nonPcard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("UpdateCredit")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        [NUnit.Framework.TestCaseAttribute("-100", null)]
        public void UpdateCreditPageValidationWhenFinancialHandlingIsCommunityAndPaymentMethodIsNonPcard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "UpdateCredit",
                    "QAFunctional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Credit page validation when Financial Handling is community and Payment Me" +
                    "thod is nonPcard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 570
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 571
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 572
 testRunner.And(string.Format("Fleet \"byr2Sh1FinCom\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 573
 testRunner.When("Search fleet \"byr2Sh1FinCom\" on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 574
 testRunner.Then("credit limit should be 0 on \"Update Credit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization Creation Failed Due To Credit Not Available when financial handling" +
            " and payment method does not exist")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("CreateAuthorization")]
        public void AuthorizationCreationFailedDueToCreditNotAvailableWhenFinancialHandlingAndPaymentMethodDoesNotExist()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "QAFunctional",
                    "CreateAuthorization"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization Creation Failed Due To Credit Not Available when financial handling" +
                    " and payment method does not exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 584
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 585
 testRunner.Given("User navigates to \"Create Authorization\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 586
 testRunner.And("Fleet \"ByrblgUSD\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 587
 testRunner.When("User Create Authorization with type \"Parts\" for Supplier \"SupBlgUSD\" and Buyer \"B" +
                        "yrblgUSD\" with invoice amount \"50.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 588
 testRunner.Then("\"Error, Credit not available: ByrblgUSD\" message should appear on UI for page \"Cr" +
                        "eate Authorization\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization Submission Sucessfully when financial handling and payment method d" +
            "oes not exist")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("CreateAuthorization")]
        public void AuthorizationSubmissionSucessfullyWhenFinancialHandlingAndPaymentMethodDoesNotExist()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "QAFunctional",
                    "CreateAuthorization"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization Submission Sucessfully when financial handling and payment method d" +
                    "oes not exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 593
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 594
 testRunner.Given("User navigates to \"Create Authorization\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 595
    testRunner.And("Fleet \"ByrblgUSD\" Credit Limit is Updated to 99999", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 596
 testRunner.When("User Create Authorization with type \"Parts\" for Supplier \"SupBlgUSD\" and Buyer \"B" +
                        "yrblgUSD\" with invoice amount \"50.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 597
 testRunner.Then("\"Successful transaction.\" message should appear on UI for page \"Create Authorizat" +
                        "ion\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Authorization Submission when financial handling and payment method does n" +
            "ot exist")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("CreateAuthorization")]
        public void CreditAuthorizationSubmissionWhenFinancialHandlingAndPaymentMethodDoesNotExist()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "QAFunctional",
                    "CreateAuthorization"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Authorization Submission when financial handling and payment method does n" +
                    "ot exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 602
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 603
   testRunner.Given("User navigates to \"Create Authorization\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 604
    testRunner.And("Fleet \"ByrblgUSD\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 605
 testRunner.When("User Create Authorization with type \"Parts\" for Supplier \"SupBlgUSD\" and Buyer \"B" +
                        "yrblgUSD\" with invoice amount \"-600.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 606
 testRunner.And("\"Successful transaction.\" message should appear on UI for page \"Create Authorizat" +
                        "ion\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 607
 testRunner.Then("\"ByrblgUSD\" Buyer credit should be 600", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Authorization Submission when Financial Handling relationship is Corcentri" +
            "c and Payment Method Relationship is PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("CreateAuthorization")]
        public void CreditAuthorizationSubmissionWhenFinancialHandlingRelationshipIsCorcentricAndPaymentMethodRelationshipIsPCard()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "QAFunctional",
                    "CreateAuthorization"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Authorization Submission when Financial Handling relationship is Corcentri" +
                    "c and Payment Method Relationship is PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 612
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 613
   testRunner.Given("User navigates to \"Create Authorization\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 614
    testRunner.And("Fleet \"18Byr11\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 615
 testRunner.When("User Create Authorization with type \"Parts\" for Supplier \"18Sup11\" and Buyer \"18B" +
                        "yr11\" with invoice amount \"-600.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 616
 testRunner.Then("\"Successful transaction.\" message should appear on UI for page \"Create Authorizat" +
                        "ion\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 617
 testRunner.Then("\"18Byr11\" Buyer credit should be 600", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Invoice Submission when Financial Handling is community and Payment Method" +
            " is PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMSSubmission")]
        public void CreditInvoiceSubmissionWhenFinancialHandlingIsCommunityAndPaymentMethodIsPCard()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMSSubmission"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Invoice Submission when Financial Handling is community and Payment Method" +
                    " is PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 623
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 624
  testRunner.Given("Fleet \"18Byr12\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 625
      testRunner.When("Invoice is submitted from DMS with Fleet \"18Byr12\" and Dealer \"18Sup12\" with tran" +
                        "saction amount -100 and quantity -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 626
  testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Positive\" c" +
                        "redit for fleet \"18Byr12\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice submission from fixable to reviewable for corcentric location")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceDiscrepancy")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionFromFixableToReviewableForCorcentricLocation()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceDiscrepancy",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice submission from fixable to reviewable for corcentric location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 631
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 632
 testRunner.Given("User navigates to \"Invoice Discrepancy\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 633
 testRunner.And("Fleet \"ByrNonCor1\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 634
 testRunner.When("Invoice is resolved from \"Unit Number\" discrepancy for \"ByrNonCor1\" buyer and \"Su" +
                        "pNonCor1\" supplier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 635
 testRunner.Then("invoice moved to discrepancy state with error \"Credit not available\" for fleet \"B" +
                        "yrNonCor1\" and supplier \"SupNonCor1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice submission from fixable to settle state for noncorcentric location")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceDiscrepancy")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionFromFixableToSettleStateForNoncorcentricLocation()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceDiscrepancy",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice submission from fixable to settle state for noncorcentric location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 640
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 641
  testRunner.Given("User navigates to \"Invoice Discrepancy\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 642
  testRunner.And("Fleet \"18Byr3\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 643
  testRunner.When("Invoice is resolved from \"Unit Number\" discrepancy for \"18Byr3\" buyer and \"18Sup3" +
                        "\" supplier by alert \"Invoice submission completed successfully.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 644
  testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"18Byr3\" and dealer \"18Sup3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice submission from reviewable to settle for corcentric location")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceDiscrepancy")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionFromReviewableToSettleForCorcentricLocation()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceDiscrepancy",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice submission from reviewable to settle for corcentric location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 650
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 651
 testRunner.Given("User navigates to \"Invoice Discrepancy\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 652
 testRunner.And("Fleet \"ByrblgUSD\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 653
 testRunner.When("Invoice is resolved from \"Credit Not Available\" discrepancy for \"ByrblgUSD\" buyer" +
                        " and \"SupBlgUSD\" supplier by alert \"Invoice submission completed successfully.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 654
 testRunner.Then("Invoice is submitted successfully for \"Corcentric\" Location with \"ByrblgUSD\" buye" +
                        "r", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission for Corcentric Location with Do Not Put Hold For Dealer Copy c" +
            "heckbox unchecked")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceDiscrepancy")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionForCorcentricLocationWithDoNotPutHoldForDealerCopyCheckboxUnchecked()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceDiscrepancy",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission for Corcentric Location with Do Not Put Hold For Dealer Copy c" +
                    "heckbox unchecked", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 659
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 660
 testRunner.Given("User navigates to \"Invoice Discrepancy\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 661
 testRunner.And("Fleet \"ByrHold2\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 662
 testRunner.When("User submit \"On hold for physical copy\" discrepant invoice for \"ByrHold2\" buyer a" +
                        "nd \"SupHold2\" supplier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 663
 testRunner.Then("\"The Invoice could not be submitted :Credit not available: ByrHold2\" message shou" +
                        "ld appear on UI for page \"Invoice Entry\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 664
 testRunner.Then("\"Invoice on hold, awaiting physical copy\" message should appear on UI for page \"I" +
                        "nvoice Entry\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission for Corcentric Location with Do Not Put Hold For Dealer Copy c" +
            "heckbox checked")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceDiscrepancy")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionForCorcentricLocationWithDoNotPutHoldForDealerCopyCheckboxChecked()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceDiscrepancy",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission for Corcentric Location with Do Not Put Hold For Dealer Copy c" +
                    "heckbox checked", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 670
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 671
 testRunner.Given("User navigates to \"Invoice Discrepancy\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 672
 testRunner.And("Fleet \"ByrHold2\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 673
 testRunner.When("Invoice is resolved from \"On hold for physical copy\" discrepancy for \"ByrHold2\" b" +
                        "uyer and \"SupHold2\" supplier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 674
    testRunner.Then("\"The Invoice could not be submitted :Credit not available: ByrHold2\" message shou" +
                        "ld appear on UI for page \"Invoice Entry\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission From Reviewable to Awaiting Fleet Release State when Financial" +
            " Handling is Corcentric")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceDiscrepancy")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionFromReviewableToAwaitingFleetReleaseStateWhenFinancialHandlingIsCorcentric()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceDiscrepancy",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission From Reviewable to Awaiting Fleet Release State when Financial" +
                    " Handling is Corcentric", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 680
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 681
    testRunner.Given("User navigates to \"Invoice Discrepancy\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 682
 testRunner.And("Fleet \"ByrCorc2\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 683
 testRunner.When("Invoice is resolved from \"Credit Not Available\" discrepancy for \"ByrCorc2\" buyer " +
                        "and \"SupCorc2\" supplier by alert \"Invoice submission completed successfully.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 684
 testRunner.Then("invoice moved to discrepancy state with error \"Awaiting Fleet Release\" for fleet " +
                        "\"ByrCorc2\" with credit \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission From Awaiting Fleet Release to Settle State When Financial Han" +
            "dling is Corcentric")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceDiscrepancy")]
        [NUnit.Framework.CategoryAttribute("FleetReleaseInvoices")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionFromAwaitingFleetReleaseToSettleStateWhenFinancialHandlingIsCorcentric()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceDiscrepancy",
                    "FleetReleaseInvoices",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission From Awaiting Fleet Release to Settle State When Financial Han" +
                    "dling is Corcentric", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 690
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 691
    testRunner.Given("User navigates to \"Fleet Release Invoices\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 692
 testRunner.And("Fleet \"ByrCorc2\" Credit Limit is Updated to 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 693
 testRunner.When("Invoice is resolved from \"Awaiting Fleet Release\" discrepancy for \"ByrCorc2\" buye" +
                        "r and \"SupCorc2\" supplier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 694
    testRunner.Then("Invoice is submitted successfully for \"Corcentric\" Location with \"ByrCorc2\" buyer" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission From Awaiting Fleet Release to Settle State When Financial Han" +
            "dling is Corcentric and Payment Method is PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("FleetReleaseInvoices")]
        public void InvoiceSubmissionFromAwaitingFleetReleaseToSettleStateWhenFinancialHandlingIsCorcentricAndPaymentMethodIsPCard()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "FleetReleaseInvoices"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission From Awaiting Fleet Release to Settle State When Financial Han" +
                    "dling is Corcentric and Payment Method is PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 699
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 700
  testRunner.Given("User navigates to \"Fleet Release Invoices\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 701
  testRunner.And("Fleet \"18Byr6\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 702
  testRunner.When("Invoice is resolved from \"Awaiting Fleet Release\" discrepancy for \"18Byr6\" buyer " +
                        "and \"18Sup6\" supplier by alert \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 703
  testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"18Byr6\" and dealer \"18Sup6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission From Reviewable to Awaiting Dealer Release State When Financia" +
            "l Handling is Corcentric")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("InvoiceDiscrepancy")]
        public void InvoiceSubmissionFromReviewableToAwaitingDealerReleaseStateWhenFinancialHandlingIsCorcentric()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "QAFunctional",
                    "InvoiceDiscrepancy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission From Reviewable to Awaiting Dealer Release State When Financia" +
                    "l Handling is Corcentric", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 708
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 709
    testRunner.Given("User navigates to \"Invoice Discrepancy\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 710
 testRunner.And("Fleet \"ByrCorADR\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 711
 testRunner.When("Invoice is resolved from \"Credit Not Available\" discrepancy for \"ByrCorADR\" buyer" +
                        " and \"SupCorADR\" supplier by alert \"Invoice submission completed successfully.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 712
 testRunner.Then("invoice moved to discrepancy state with error \"Awaiting Dealer Release\" for fleet" +
                        " \"ByrCorADR\" with credit \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission From Awaiting Dealer Release to Settle State When Financial Ha" +
            "ndling is Corcentric")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("DealerReleaseInvoices")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionFromAwaitingDealerReleaseToSettleStateWhenFinancialHandlingIsCorcentric()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "DealerReleaseInvoices",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission From Awaiting Dealer Release to Settle State When Financial Ha" +
                    "ndling is Corcentric", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 717
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 718
    testRunner.Given("User navigates to \"Dealer Release Invoices\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 719
 testRunner.And("Fleet \"ByrCorADR\" Credit Limit is Updated to 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 720
 testRunner.When("Invoice is resolved from \"Awaiting Dealer Release\" discrepancy for \"ByrCorADR\" bu" +
                        "yer and \"SupCorADR\" supplier by alert \"Invoice submission completed successfully" +
                        ".\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 721
    testRunner.Then("Invoice is submitted successfully for \"Corcentric\" Location with \"ByrCorADR\" buye" +
                        "r", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice submission for noncorcentric shop location then negative credit added to " +
            "its billing")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionForNoncorcentricShopLocationThenNegativeCreditAddedToItsBilling()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice submission for noncorcentric shop location then negative credit added to " +
                    "its billing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 726
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 727
 testRunner.Given("Fleet \"ByrHrchy1\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 728
 testRunner.And("Fleet \"Byrhrchyshop1\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 729
 testRunner.When("Invoice is submitted from DMS with Fleet \"Byrhrchyshop1\" and Dealer \"Suphrchshop1" +
                        "\" with transaction amount 100 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 730
 testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"ByrHrchy1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 731
 testRunner.Then("\"Byrhrchyshop1\" Buyer credit should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Clone Submission Sucessfully with corcentric location")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("DealerInvoices")]
        [NUnit.Framework.CategoryAttribute("Clone")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceCloneSubmissionSucessfullyWithCorcentricLocation()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "DealerInvoices",
                    "Clone",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Clone Submission Sucessfully with corcentric location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 736
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 737
 testRunner.Given("User navigates to \"Dealer Invoices\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 738
 testRunner.And("Fleet \"ByrCloneCor2\" Credit Limit is Updated to 99999", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 739
 testRunner.When("Rebill the invoice from \"SupCloneCor1\" dealer and \"ByrCloneCor2\" fleet for settle" +
                        " state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 740
    testRunner.Then("Invoice is submitted successfully for \"Corcentric\" Location with \"ByrCloneCor2\" b" +
                        "uyer after Create Rebill", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Clone Submission Failed Due to Credit Not Available")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("DealerInvoices")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("Clone")]
        public void InvoiceCloneSubmissionFailedDueToCreditNotAvailable()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "DealerInvoices",
                    "QAFunctional",
                    "Clone"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Clone Submission Failed Due to Credit Not Available", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 745
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 746
 testRunner.Given("User navigates to \"Dealer Invoices\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 747
 testRunner.And("Fleet \"ByrCloneCor2\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 748
 testRunner.When("\"Rebill the invoice\" from \"SupCloneCor1\" dealer and \"ByrCloneCor2\" fleet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 749
 testRunner.Then("\"The Invoice could not be submitted :Credit not available: ByrCloneCor2\" message " +
                        "should appear on UI for page \"Invoice Entry\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Clone Submission Sucessfully with noncorcentric location when credit is l" +
            "esser than transaction amount")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("DealerInvoices")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("Clone")]
        public void InvoiceCloneSubmissionSucessfullyWithNoncorcentricLocationWhenCreditIsLesserThanTransactionAmount()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "DealerInvoices",
                    "QAFunctional",
                    "Clone"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Clone Submission Sucessfully with noncorcentric location when credit is l" +
                    "esser than transaction amount", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 754
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 755
 testRunner.Given("User navigates to \"Dealer Invoices\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 756
 testRunner.And("Fleet \"ByrClone3\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 757
 testRunner.When("Rebill the invoice from \"SupClone3\" dealer and \"ByrClone3 \" fleet for settle stat" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 758
    testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"ByrClone3 \"" +
                        " buyer after Create Rebill", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization Submission From Create Authorization Failed Due To Credit Not Avail" +
            "able When Location Is Corcentric")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("CreateAuthorization")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void AuthorizationSubmissionFromCreateAuthorizationFailedDueToCreditNotAvailableWhenLocationIsCorcentric()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "CreateAuthorization",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization Submission From Create Authorization Failed Due To Credit Not Avail" +
                    "able When Location Is Corcentric", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 763
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 764
  testRunner.Given("User navigates to \"Create Authorization\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 765
 testRunner.And("Fleet \"byrShFinCor1\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 766
 testRunner.When("User Create Authorization with type \"Parts\" for Supplier \"SupShFinCor1\" and Buyer" +
                        " \"byrShFinCor1\" with invoice amount \"50.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 767
 testRunner.Then("\"Error, Credit not available: byrShFinCor1\" message should appear on UI for page " +
                        "\"Create Authorization\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization Submission Sucessfull From Create Authorization With Credit Availab" +
            "le for corcentric location")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("CreateAuthorization")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void AuthorizationSubmissionSucessfullFromCreateAuthorizationWithCreditAvailableForCorcentricLocation()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "CreateAuthorization",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization Submission Sucessfull From Create Authorization With Credit Availab" +
                    "le for corcentric location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 772
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 773
  testRunner.Given("User navigates to \"Create Authorization\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 774
    testRunner.And("Fleet \"byrShFinCor1\" Credit Limit is Updated to 99999", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 775
 testRunner.When("User Create Authorization with type \"Parts\" for Supplier \"SupShFinCor1\" and Buyer" +
                        " \"byrShFinCor1\" with invoice amount \"50.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 776
 testRunner.Then("\"Successful transaction.\" message should appear on UI for page \"Create Authorizat" +
                        "ion\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Reversal with credit not available for corcentric location")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DealerInvoices")]
        [NUnit.Framework.CategoryAttribute("Reversal")]
        public void InvoiceReversalWithCreditNotAvailableForCorcentricLocation()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DealerInvoices",
                    "Reversal"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Reversal with credit not available for corcentric location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 781
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 782
  testRunner.Given("User navigates to \"Dealer Invoices\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 783
     testRunner.And("Fleet \"ByrReverseCor2\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 784
  testRunner.When("\"Create a reversal\" from \"SupReverseCor2\" dealer and \"ByrReverseCor2\" fleet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 785
  testRunner.Then("\"Reversal Transaction submission completed successfully.\" message should appear o" +
                        "n UI for page \"Offset Transaction\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 786
  testRunner.Then("Invoice is submitted successfully for \"Corcentric\" Location with \"ByrReverseCor2\"" +
                        " buyer after Reversal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Reversal with credit not available for noncorcentric location")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DealerInvoices")]
        [NUnit.Framework.CategoryAttribute("Reversal")]
        public void InvoiceReversalWithCreditNotAvailableForNoncorcentricLocation()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DealerInvoices",
                    "Reversal"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Reversal with credit not available for noncorcentric location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 792
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 793
  testRunner.Given("User navigates to \"Dealer Invoices\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 794
     testRunner.And("Fleet \"ByrReverseCon4\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 795
  testRunner.When("\"Create a reversal\" from \"SupReverseCon4\" dealer and \"ByrReverseCon4\" fleet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 796
  testRunner.Then("\"Reversal Transaction submission completed successfully.\" message should appear o" +
                        "n UI for page \"Offset Transaction\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 797
  testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"ByrReverseC" +
                        "on4\" buyer after Reversal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization Submission from Create Authorization for nonCorcentric location wit" +
            "h insuffcient credit")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("CreateAuthorization")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void AuthorizationSubmissionFromCreateAuthorizationForNonCorcentricLocationWithInsuffcientCredit()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "CreateAuthorization",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization Submission from Create Authorization for nonCorcentric location wit" +
                    "h insuffcient credit", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 802
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 803
 testRunner.Given("User navigates to \"Create Authorization\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 804
    testRunner.And("Fleet \"18Byr9\" Credit Limit is Updated to 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 805
 testRunner.When("User Create Authorization with type \"Parts\" for Supplier \"18Sup9\" and Buyer \"18By" +
                        "r9\" with invoice amount \"50.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 806
 testRunner.Then("\"Successful transaction.\" message should appear on UI for page \"Create Authorizat" +
                        "ion\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization Submission from Open Authorization for nonCorcentric location with " +
            "insuffcient credit")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("OpenAuthorization")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void AuthorizationSubmissionFromOpenAuthorizationForNonCorcentricLocationWithInsuffcientCredit()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "OpenAuthorization",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization Submission from Open Authorization for nonCorcentric location with " +
                    "insuffcient credit", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 812
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 813
 testRunner.Given("User navigates to \"Open Authorizations\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 814
 testRunner.And("Fleet \"18Byr10\" Credit Limit is Updated to 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 815
 testRunner.When("User Create Authorization with type \"Parts\" for Supplier \"18Sup10\" and Buyer \"18B" +
                        "yr10\" with invoice amount \"50.00\" from Open Authorization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 816
 testRunner.Then("\"Successful transaction.\" message should appear on UI for page \"Create Authorizat" +
                        "ion Popup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit Invoice Submission For Corcentric Location")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        public void CreditInvoiceSubmissionForCorcentricLocation()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMS"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit Invoice Submission For Corcentric Location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 822
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 823
  testRunner.Given("Fleet \"ByrblgUSD\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 824
      testRunner.When("Invoice is submitted from DMS with Fleet \"ByrblgUSD\" and Dealer \"SupBlgUSD\" with " +
                        "transaction amount -100 and quantity -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 825
  testRunner.Then("Invoice is submitted successfully for \"Corcentric\" Location with \"Positive\" credi" +
                        "t for fleet \"ByrblgUSD\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice submission from fatal to reviewable state for corcentric locations")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("InvoiceDiscrepancy")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionFromFatalToReviewableStateForCorcentricLocations()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "InvoiceDiscrepancy",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice submission from fatal to reviewable state for corcentric locations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 830
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 831
  testRunner.Given("User navigates to \"Invoice Discrepancy\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 832
  testRunner.And("Fleet \"byrShFinCor\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 833
  testRunner.When("Invoice is resolved from \"Dealer Code Invalid\" discrepancy for \"byrShFinCor\" buye" +
                        "r and \"SupShFinCor\" supplier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 834
  testRunner.Then("invoice moved to discrepancy state with error \"Credit not available\" for fleet \"b" +
                        "yrShFinCor\" with credit \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice submission from fatal to settle state for noncorcentric locations")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("InvoiceDiscrepancy")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionFromFatalToSettleStateForNoncorcentricLocations()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "InvoiceDiscrepancy",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice submission from fatal to settle state for noncorcentric locations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 839
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 840
  testRunner.Given("User navigates to \"Invoice Discrepancy\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 841
  testRunner.And("Fleet \"18Byr4\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 842
  testRunner.When("Invoice is resolved from \"Dealer Code Invalid\" discrepancy for \"18Byr4\" buyer and" +
                        " \"18Sup4\" supplier by alert \"Invoice submission completed successfully.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 843
  testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"18Byr4\" and dealer \"18Sup4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission for NonCorcentric Location with Do Not Put Hold For Dealer Cop" +
            "y checkbox unchecked")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceDiscrepancy")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionForNonCorcentricLocationWithDoNotPutHoldForDealerCopyCheckboxUnchecked()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceDiscrepancy",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission for NonCorcentric Location with Do Not Put Hold For Dealer Cop" +
                    "y checkbox unchecked", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 848
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 849
 testRunner.Given("User navigates to \"Invoice Discrepancy\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 850
 testRunner.And("Fleet \"ByrHold3\" Credit Limit is Updated to 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 851
 testRunner.When("User submit \"On hold for physical copy\" discrepant invoice for \"ByrHold3\" buyer a" +
                        "nd \"SupHold3\" supplier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 852
 testRunner.Then("\"Invoice submission resulted in discrepancy.\" message should appear on UI for pag" +
                        "e \"Invoice Entry\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 853
 testRunner.Then("invoice moved to discrepancy state with error \"Invoice on hold\" for fleet \"ByrHol" +
                        "d3\" with credit \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission for NonCorcentric Location with Do Not Put Hold For Dealer Cop" +
            "y checkbox checked")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceDiscrepancy")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionForNonCorcentricLocationWithDoNotPutHoldForDealerCopyCheckboxChecked()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceDiscrepancy",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission for NonCorcentric Location with Do Not Put Hold For Dealer Cop" +
                    "y checkbox checked", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 859
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 860
 testRunner.Given("User navigates to \"Invoice Discrepancy\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 861
 testRunner.And("Fleet \"ByrHold3\" Credit Limit is Updated to 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 862
 testRunner.When("Invoice is resolved from \"On hold for physical copy\" discrepancy for \"ByrHold3\" b" +
                        "uyer and \"SupHold3\" supplier by alert \"Invoice submission completed successfully" +
                        ".\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 863
 testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"ByrHold3\" b" +
                        "uyer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission From Awaiting Dealer Release to Settle State with NonCorcentri" +
            "c Location")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("DealerReleaseInvoices")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionFromAwaitingDealerReleaseToSettleStateWithNonCorcentricLocation()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "DealerReleaseInvoices",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission From Awaiting Dealer Release to Settle State with NonCorcentri" +
                    "c Location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 868
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 869
 testRunner.Given("User navigates to \"Dealer Release Invoices\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 870
 testRunner.And("Fleet \"18Byr5\" Credit Limit is Updated to 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 871
 testRunner.When("Invoice is resolved from \"Awaiting Dealer Release\" discrepancy for \"18Byr5\" buyer" +
                        " and \"18Sup5\" supplier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 872
 testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"18Byr5\" and dealer \"18Sup5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submitted as Non corcentric for Fleet participating in a Group and Group " +
            "has Non corcentric relationship")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("HierarchyScenarios")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmittedAsNonCorcentricForFleetParticipatingInAGroupAndGroupHasNonCorcentricRelationship()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "HierarchyScenarios",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submitted as Non corcentric for Fleet participating in a Group and Group " +
                    "has Non corcentric relationship", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 877
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 878
 testRunner.Given("Fleet \"Byrhrchyshop2\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 879
 testRunner.And("Fleet \"ByrHrchy2\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 880
    testRunner.When("invoice is sucessfully created using Dealer \"SupHrchy2\" and Fleet \"Byrhrchyshop2\"" +
                        " with invoice type \"Parts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 881
 testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"ByrHrchy2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 882
 testRunner.Then("\"Byrhrchyshop2\" Buyer credit should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submitted as non corcentric for Fleet participating in a Group where Flee" +
            "t to All dealer relationship is corcentric and Group has non corcentric relation" +
            "ship")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("HierarchyScenarios")]
        public void InvoiceSubmittedAsNonCorcentricForFleetParticipatingInAGroupWhereFleetToAllDealerRelationshipIsCorcentricAndGroupHasNonCorcentricRelationship()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "HierarchyScenarios"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submitted as non corcentric for Fleet participating in a Group where Flee" +
                    "t to All dealer relationship is corcentric and Group has non corcentric relation" +
                    "ship", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 887
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 888
 testRunner.Given("Fleet \"Byrhrchyshop3\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 889
 testRunner.And("Fleet \"ByrHrchy3\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 890
 testRunner.When("invoice is sucessfully created using Dealer \"SupHrchy2\" and Fleet \"Byrhrchyshop3\"" +
                        " with invoice type \"Parts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 891
 testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"ByrHrchy3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 892
 testRunner.Then("\"Byrhrchyshop3\" Buyer credit should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("For both payment method and financial handling relationship when fleet to specifi" +
            "c dealer and fleet to all dealer relationship exist than specific is picked")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("HierarchyScenarios")]
        public void ForBothPaymentMethodAndFinancialHandlingRelationshipWhenFleetToSpecificDealerAndFleetToAllDealerRelationshipExistThanSpecificIsPicked()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "HierarchyScenarios"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("For both payment method and financial handling relationship when fleet to specifi" +
                    "c dealer and fleet to all dealer relationship exist than specific is picked", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 897
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 898
 testRunner.Given("Fleet \"ByrHrchy5\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 899
 testRunner.When("invoice is sucessfully created using Dealer \"SupHrchy5\" and Fleet \"ByrHrchy5\" wit" +
                        "h invoice type \"Parts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 900
 testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"ByrHrchy5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submitted as corcentric for Fleet participating in a Group where Group ha" +
            "s corcentric relationship")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("HierarchyScenarios")]
        public void InvoiceSubmittedAsCorcentricForFleetParticipatingInAGroupWhereGroupHasCorcentricRelationship()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "HierarchyScenarios"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submitted as corcentric for Fleet participating in a Group where Group ha" +
                    "s corcentric relationship", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 905
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 906
 testRunner.Given("Fleet \"ByrHrchy4\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 907
 testRunner.When("Invoice is submitted from DMS with Fleet \"ByrHrchy4\" and Dealer \"SupHrchy4\" with " +
                        "transaction amount 100 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 908
 testRunner.Then("invoice moved to discrepancy state with error \"Credit not available\" for fleet \"B" +
                        "yrHrchy4\" and dealer \"SupHrchy4\" with credit \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submitted as Non corcentric for Fleet parent shop when Fleet Billing part" +
            "icipating in a Group which has corcentric relationship but Fleet parent shop has" +
            " Non corcentric relationship")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("HierarchyScenarios")]
        public void InvoiceSubmittedAsNonCorcentricForFleetParentShopWhenFleetBillingParticipatingInAGroupWhichHasCorcentricRelationshipButFleetParentShopHasNonCorcentricRelationship()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "HierarchyScenarios"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submitted as Non corcentric for Fleet parent shop when Fleet Billing part" +
                    "icipating in a Group which has corcentric relationship but Fleet parent shop has" +
                    " Non corcentric relationship", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 913
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 914
 testRunner.Given("Fleet \"ByrHrchyPS4\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 915
 testRunner.And("Fleet \"ByrHrchy4\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 916
 testRunner.When("invoice is sucessfully created using Dealer \"SupHrchy4\" and Fleet \"ByrHrchyPS4\" w" +
                        "ith invoice type \"Parts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 917
 testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"ByrHrchy4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 918
 testRunner.Then("\"ByrHrchyPS4\" Buyer credit should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submitted as corcentric for Fleet participationg in a Group and Group has" +
            " corcentric relationship")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("HierarchyScenarios")]
        public void InvoiceSubmittedAsCorcentricForFleetParticipationgInAGroupAndGroupHasCorcentricRelationship()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "HierarchyScenarios"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submitted as corcentric for Fleet participationg in a Group and Group has" +
                    " corcentric relationship", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 923
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 924
 testRunner.Given("Fleet \"ByrHrchy6\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 925
 testRunner.When("Invoice is submitted from DMS with Fleet \"ByrHrchy6\" and Dealer \"SupHrchy6\" with " +
                        "transaction amount 100 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 926
 testRunner.Then("invoice moved to discrepancy state with error \"Credit not available\" for fleet \"B" +
                        "yrHrchy6\" and dealer \"SupHrchy6\" with credit \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submitted as non corcentric for Fleet shop when Fleet Billing participati" +
            "ng in a Group which has corcentric relationship but Fleet shop has non corcentri" +
            "c relationship")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("HierarchyScenarios")]
        public void InvoiceSubmittedAsNonCorcentricForFleetShopWhenFleetBillingParticipatingInAGroupWhichHasCorcentricRelationshipButFleetShopHasNonCorcentricRelationship()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "HierarchyScenarios"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submitted as non corcentric for Fleet shop when Fleet Billing participati" +
                    "ng in a Group which has corcentric relationship but Fleet shop has non corcentri" +
                    "c relationship", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 931
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 932
 testRunner.Given("Fleet \"ByrHrchy6\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 933
 testRunner.And("Fleet \"ByrHrchyshop6\" Credit Limit is Updated to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 934
 testRunner.When("Invoice is submitted from DMS with Fleet \"ByrHrchyshop6\" and Dealer \"SupHrchy6\" w" +
                        "ith transaction amount 100 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 935
 testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Negative\" c" +
                        "redit for fleet \"ByrHrchy6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 936
 testRunner.Then("\"ByrHrchyshop6\" Buyer credit should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission when payment method relationship is PCard and financial handli" +
            "ng is Corcentric")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionWhenPaymentMethodRelationshipIsPCardAndFinancialHandlingIsCorcentric()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission when payment method relationship is PCard and financial handli" +
                    "ng is Corcentric", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 942
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 943
 testRunner.Given("User navigates to \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 944
 testRunner.And("Relationship \"Financial Handling\" with \"Corcentric\" is created between Dealer \"Al" +
                        "l Dealers\" and Fleet \"Byr13\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 945
 testRunner.And("Relationship \"Payment Method\" with \"PCard\" is created between Dealer \"All Dealers" +
                        "\" and Fleet \"Byr13\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 946
 testRunner.When("Invoice is submitted from DMS with Fleet \"Byr13\" and Dealer \"Sup13\" with transact" +
                        "ion amount 100 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 947
 testRunner.Then("Invoice is submitted successfully for \"Non-Corcentric\" Location with \"Positive\" c" +
                        "redit for fleet \"Byr13\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission when payment method relationship updated from PCard to NonPCar" +
            "d and Financial Handling is Corcentric")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        public void InvoiceSubmissionWhenPaymentMethodRelationshipUpdatedFromPCardToNonPCardAndFinancialHandlingIsCorcentric()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission when payment method relationship updated from PCard to NonPCar" +
                    "d and Financial Handling is Corcentric", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 953
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 954
 testRunner.Given("User navigates to \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 955
 testRunner.And("Relationship \"Payment Method\" with \"EFT PUSH\" is updated between Dealer \"All Deal" +
                        "ers\" and Fleet \"Byr13\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 956
 testRunner.When("Invoice is submitted from DMS with Fleet \"Byr13\" and Dealer \"Sup13\" with transact" +
                        "ion amount 100 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 957
 testRunner.Then("Invoice is submitted successfully for \"Corcentric\" Location with \"Positive\" credi" +
                        "t for fleet \"Byr13\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission with no credit available when fianancial handling and payment " +
            "method does not exist")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void InvoiceSubmissionWithNoCreditAvailableWhenFianancialHandlingAndPaymentMethodDoesNotExist(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission with no credit available when fianancial handling and payment " +
                    "method does not exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 962
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 963
  testRunner.Given(string.Format("Fleet \"ByrblgUSD\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 964
  testRunner.When("Invoice is submitted from DMS with Fleet \"ByrblgUSD\" and Dealer \"SupBlgUSD\" with " +
                        "transaction amount 2 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 965
  testRunner.Then(string.Format("invoice moved to discrepancy state with error \"Credit Not Available\" for fleet \"B" +
                            "yrblgUSD\" and dealer \"SupBlgUSD\" with credit \"{0}\"", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission with no credit available when financial handling relationship " +
            "is corcentric")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.CategoryAttribute("UAT")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void InvoiceSubmissionWithNoCreditAvailableWhenFinancialHandlingRelationshipIsCorcentric(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMS",
                    "UAT"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission with no credit available when financial handling relationship " +
                    "is corcentric", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 974
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 975
  testRunner.Given(string.Format("Fleet \"byrShFinCor1\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 976
    testRunner.When("Invoice is submitted from DMS with Fleet \"byrShFinCor1\" and Dealer \"SupShFinCor1\"" +
                        " with transaction amount 2 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 977
  testRunner.Then(string.Format("invoice moved to discrepancy state with error \"Credit Not Available\" for fleet \"b" +
                            "yrShFinCor1\" and dealer \"SupShFinCor1\" with credit \"{0}\"", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission with no credit available when Financial Handling is corcentric" +
            " and Payment Method is check")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void InvoiceSubmissionWithNoCreditAvailableWhenFinancialHandlingIsCorcentricAndPaymentMethodIsCheck(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission with no credit available when Financial Handling is corcentric" +
                    " and Payment Method is check", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 986
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 987
  testRunner.Given(string.Format("Fleet \"byrShFinCor\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 988
    testRunner.When("Invoice is submitted from DMS with Fleet \"byrShFinCor\" and Dealer \"SupShFinCor\" w" +
                        "ith transaction amount 2 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 989
  testRunner.Then(string.Format("invoice moved to discrepancy state with error \"Credit Not Available\" for fleet \"b" +
                            "yrShFinCor\" and dealer \"SupShFinCor\" with credit \"{0}\"", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization Submission with no credit available when Financial Handling is corc" +
            "entric and Payment Method is check")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.CategoryAttribute("UAT")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void AuthorizationSubmissionWithNoCreditAvailableWhenFinancialHandlingIsCorcentricAndPaymentMethodIsCheck(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "QAFunctional",
                    "DMS",
                    "UAT"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization Submission with no credit available when Financial Handling is corc" +
                    "entric and Payment Method is check", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 998
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 999
     testRunner.Given(string.Format("Fleet \"byrShFinCor\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1000
  testRunner.When("Authorization is submitted from DMS with Fleet \"byrShFinCor\" and Dealer \"SupShFin" +
                        "Cor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1001
     testRunner.Then(string.Format("Authorization should move to discrepancy state with error \"Credit Not Available\" " +
                            "for fleet \"byrShFinCor\" with credit \"{0}\"", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization Submission with no credit available when fianancial handling and pa" +
            "yment method does not exist")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void AuthorizationSubmissionWithNoCreditAvailableWhenFianancialHandlingAndPaymentMethodDoesNotExist(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization Submission with no credit available when fianancial handling and pa" +
                    "yment method does not exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1010
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1011
     testRunner.Given(string.Format("Fleet \"ByrblgUSD\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1012
     testRunner.When("Authorization is submitted from DMS with Fleet \"ByrblgUSD\" and Dealer \"SupBlgUSD\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1013
     testRunner.Then(string.Format("Authorization should move to discrepancy state with error \"Credit Not Available\" " +
                            "for fleet \"ByrblgUSD\" with credit \"{0}\"", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization Submission with no credit available when Financial Handling Relatio" +
            "nship is corcentric")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void AuthorizationSubmissionWithNoCreditAvailableWhenFinancialHandlingRelationshipIsCorcentric(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization Submission with no credit available when Financial Handling Relatio" +
                    "nship is corcentric", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1024
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1025
     testRunner.Given(string.Format("Fleet \"byrShFinCor1\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1026
     testRunner.When("Authorization is submitted from DMS with Fleet \"byrShFinCor1\" and Dealer \"SupShFi" +
                        "nCor1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1027
     testRunner.Then(string.Format("Authorization should move to discrepancy state with error \"Credit Not Available\" " +
                            "for fleet \"byrShFinCor1\" with credit \"{0}\"", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice Submission with no credit available when Financial Handling Relationship " +
            "is PCard")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.CategoryAttribute("UAT")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void InvoiceSubmissionWithNoCreditAvailableWhenFinancialHandlingRelationshipIsPCard(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMS",
                    "UAT"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice Submission with no credit available when Financial Handling Relationship " +
                    "is PCard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1036
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1037
  testRunner.Given(string.Format("Fleet \"byrShFinPca\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1038
   testRunner.When("Invoice is submitted from DMS with Fleet \"byrShFinPca\" and Dealer \"SupShFinPca\" w" +
                        "ith transaction amount 2 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1039
  testRunner.Then("invoice should move to settle state without error \"Credit Not Available\" for flee" +
                        "t \"byrShFinPca\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice bypass credit not available discrepancy when financial handling is Commun" +
            "ity from DMS")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void InvoiceBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingIsCommunityFromDMS(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice bypass credit not available discrepancy when financial handling is Commun" +
                    "ity from DMS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1048
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1049
     testRunner.Given(string.Format("Fleet \"byrShFinCom\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1050
   testRunner.When("Invoice is submitted from DMS with Fleet \"byrShFinCom\" and Dealer \"SupShFinCom\" w" +
                        "ith transaction amount 2 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1051
     testRunner.Then("invoice should move to settle state without error \"Credit Not Available\" for flee" +
                        "t \"byrShFinCom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice bypass credit not available discrepancy when financial handling is Report" +
            "ing Only\tfrom DMS")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void InvoiceBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingIsReportingOnlyFromDMS(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice bypass credit not available discrepancy when financial handling is Report" +
                    "ing Only\tfrom DMS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1060
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1061
     testRunner.Given(string.Format("Fleet \"byrShFinRep\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1062
   testRunner.When("Invoice is submitted from DMS with Fleet \"byrShFinRep\" and Dealer \"SupShFinRep\" w" +
                        "ith transaction amount 2 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1063
     testRunner.Then("invoice should move to settle state without error \"Credit Not Available\" for flee" +
                        "t \"byrShFinRep\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice bypass credit not available discrepancy when Payment Method Relationship " +
            "is PCard\tfrom DMS")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void InvoiceBypassCreditNotAvailableDiscrepancyWhenPaymentMethodRelationshipIsPCardFromDMS(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice bypass credit not available discrepancy when Payment Method Relationship " +
                    "is PCard\tfrom DMS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1072
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1073
     testRunner.Given(string.Format("Fleet \"ByrblgUSD1\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1074
     testRunner.When("Invoice is submitted from DMS with Fleet \"ByrblgUSD1\" and Dealer \"SupBlgUSD1\" wit" +
                        "h transaction amount 2 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1075
     testRunner.Then("invoice should move to settle state without error \"Credit Not Available\" for flee" +
                        "t \"ByrblgUSD1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice bypass credit not available discrepancy when financial handling is Corcen" +
            "tric and Payment Method is PCard from DMS")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void InvoiceBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingIsCorcentricAndPaymentMethodIsPCardFromDMS(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice bypass credit not available discrepancy when financial handling is Corcen" +
                    "tric and Payment Method is PCard from DMS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1084
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1085
     testRunner.Given(string.Format("Fleet \"byrSh1FinCor\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1086
     testRunner.When("Invoice is submitted from DMS with Fleet \"byrSh1FinCor\" and Dealer \"SupSh1FinCor\"" +
                        " with transaction amount 2 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1087
     testRunner.Then("invoice should move to settle state without error \"Credit Not Available\" for flee" +
                        "t \"byrSh1FinCor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice bypass credit not available discrepancy when financial handling is PCard " +
            "and Payment Method is PCard from DMS")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void InvoiceBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingIsPCardAndPaymentMethodIsPCardFromDMS(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice bypass credit not available discrepancy when financial handling is PCard " +
                    "and Payment Method is PCard from DMS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1096
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1097
     testRunner.Given(string.Format("Fleet \"byrSh2FinCor\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1098
     testRunner.When("Invoice is submitted from DMS with Fleet \"byrSh2FinCor\" and Dealer \"SupSh2FinCor\"" +
                        " with transaction amount 2 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1099
     testRunner.Then("invoice should move to settle state without error \"Credit Not Available\" for flee" +
                        "t \"byrSh2FinCor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice bypass credit not available discrepancy when financial handling is Report" +
            "ing Only and Payment Method is Pcard\tfrom DMS")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void InvoiceBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingIsReportingOnlyAndPaymentMethodIsPcardFromDMS(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice bypass credit not available discrepancy when financial handling is Report" +
                    "ing Only and Payment Method is Pcard\tfrom DMS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1109
     testRunner.Given(string.Format("Fleet \"byrSh3FinPca\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1110
     testRunner.When("Invoice is submitted from DMS with Fleet \"byrSh3FinPca\" and Dealer \"SupSh3FinPca\"" +
                        " with transaction amount 2 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1111
     testRunner.Then("invoice should move to settle state without error \"Credit Not Available\" for flee" +
                        "t \"byrSh3FinPca\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice bypass credit not available discrepancy when financial handling is Commun" +
            "ity and Payment Method is Pcard from DMS")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void InvoiceBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingIsCommunityAndPaymentMethodIsPcardFromDMS(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice bypass credit not available discrepancy when financial handling is Commun" +
                    "ity and Payment Method is Pcard from DMS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1120
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1121
     testRunner.Given(string.Format("Fleet \"byrSh4FinRep\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1122
     testRunner.When("Invoice is submitted from DMS with Fleet \"byrSh4FinRep\" and Dealer \"SupSh4FinRep\"" +
                        " with transaction amount 2 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1123
     testRunner.Then("invoice should move to settle state without error \"Credit Not Available\" for flee" +
                        "t \"byrSh4FinRep\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invoice bypass credit not available discrepancy when Financial Handling is commun" +
            "ity and Payment Method is check from DMS")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void InvoiceBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingIsCommunityAndPaymentMethodIsCheckFromDMS(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invoice bypass credit not available discrepancy when Financial Handling is commun" +
                    "ity and Payment Method is check from DMS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1133
 testRunner.Given(string.Format("Fleet \"byr2Sh1FinCom\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1134
 testRunner.When("Invoice is submitted from DMS with Fleet \"byr2Sh1FinCom\" and Dealer \"Sup2Sh1FinCo" +
                        "m\" with transaction amount 2 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1135
    testRunner.Then("invoice should move to settle state without error \"Credit Not Available\" for flee" +
                        "t \"byr2Sh1FinCom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization bypass credit not available discrepancy when financial handling is " +
            "Community and Payment Method is check from DMS")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void AuthorizationBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingIsCommunityAndPaymentMethodIsCheckFromDMS(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization bypass credit not available discrepancy when financial handling is " +
                    "Community and Payment Method is check from DMS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1145
     testRunner.Given(string.Format("Fleet \"byrShFinCom\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1146
     testRunner.When("Authorization is submitted from DMS with Fleet \"byrShFinCom\" and Dealer \"SupShFin" +
                        "Com\" with transaction amount 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1147
     testRunner.Then("Authorization should move to settle state without error \"Credit Not Available\" fo" +
                        "r fleet \"byrShFinCom\" with credit \"Negative\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization bypass credit not available discrepancy when financial handling PCa" +
            "rd from DMS")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void AuthorizationBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingPCardFromDMS(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization bypass credit not available discrepancy when financial handling PCa" +
                    "rd from DMS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1156
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1157
     testRunner.Given(string.Format("Fleet \"byrShFinPca\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1158
   testRunner.When("Authorization is submitted from DMS with Fleet \"byrShFinPca\" and Dealer \"SupShFin" +
                        "Pca\" with transaction amount 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1159
     testRunner.Then("Authorization should move to settle state without error \"Credit Not Available\" fo" +
                        "r fleet \"byrShFinPca\" with credit \"Negative\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization bypass credit not available discrepancy when financial handling Rep" +
            "orting Only from DMS")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void AuthorizationBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingReportingOnlyFromDMS(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization bypass credit not available discrepancy when financial handling Rep" +
                    "orting Only from DMS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1168
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1169
     testRunner.Given(string.Format("Fleet \"byrShFinRep\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1170
   testRunner.When("Authorization is submitted from DMS with Fleet \"byrShFinRep\" and Dealer \"SupShFin" +
                        "Rep\" with transaction amount 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1171
     testRunner.Then("Authorization should move to settle state without error \"Credit Not Available\" fo" +
                        "r fleet \"byrShFinRep\" with credit \"Negative\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization bypass credit not available discrepancy when Payment Method is PCar" +
            "d from DMS")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void AuthorizationBypassCreditNotAvailableDiscrepancyWhenPaymentMethodIsPCardFromDMS(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "QAFunctional",
                    "DMS"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization bypass credit not available discrepancy when Payment Method is PCar" +
                    "d from DMS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1180
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1181
     testRunner.Given(string.Format("Fleet \"ByrblgUSD1\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1182
     testRunner.When("Authorization is submitted from DMS with Fleet \"ByrblgUSD1\" and Dealer \"SupBlgUSD" +
                        "1\" with transaction amount 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1183
     testRunner.Then("Authorization should move to settle state without error \"Credit Not Available\" fo" +
                        "r fleet \"ByrblgUSD1\" with credit \"Negative\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authorization bypass credit not available discrepancy when financial handling Cor" +
            "centric and Payment Method is PCard from DMS")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("AuthorizationSubmission")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        [NUnit.Framework.CategoryAttribute("UAT")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("1", null)]
        public void AuthorizationBypassCreditNotAvailableDiscrepancyWhenFinancialHandlingCorcentricAndPaymentMethodIsPCardFromDMS(string creditAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "AuthorizationSubmission",
                    "QAFunctional",
                    "DMS",
                    "UAT"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CreditAmount", creditAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization bypass credit not available discrepancy when financial handling Cor" +
                    "centric and Payment Method is PCard from DMS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1192
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1193
     testRunner.Given(string.Format("Fleet \"byrSh1FinCor\" Credit Limit is Updated to {0}", creditAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1194
     testRunner.When("Authorization is submitted from DMS with Fleet \"byrSh1FinCor\" and Dealer \"SupSh1F" +
                        "inCor\" with transaction amount 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1195
     testRunner.Then("Authorization should move to settle state without error \"Credit Not Available\" fo" +
                        "r fleet \"byrSh1FinCor\" with credit \"Negative\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Corcentric Invoice of financial handling Corcentric type sent to D365")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("ExportedToAccounting")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        public void CorcentricInvoiceOfFinancialHandlingCorcentricTypeSentToD365()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "ExportedToAccounting",
                    "QAFunctional",
                    "DMS"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Corcentric Invoice of financial handling Corcentric type sent to D365", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1205
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1206
 testRunner.Given("Fleet \"byrShFinCor1\" Credit Limit is Updated to 999999", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1207
 testRunner.When("Invoice is submitted from DMS with Fleet \"byrShFinCor1\" and Dealer \"SupShFinCor1\"" +
                        " with transaction amount 100 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1208
 testRunner.Then("Exported To Accounting should be \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non Corcentric Invoice of financial handling Pcard type not sent to D365")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("ExportedToAccounting")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        public void NonCorcentricInvoiceOfFinancialHandlingPcardTypeNotSentToD365()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "ExportedToAccounting",
                    "QAFunctional",
                    "DMS"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non Corcentric Invoice of financial handling Pcard type not sent to D365", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1213
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1214
 testRunner.Given("Fleet \"byrShFinPca\" Credit Limit is Updated to 999999", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1215
 testRunner.When("Invoice is submitted from DMS with Fleet \"byrShFinPca\" and Dealer \"SupShFinPca\" w" +
                        "ith transaction amount 100 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1216
 testRunner.Then("Exported To Accounting should be \"False\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non Corcentric Invoice of financial handling Reporting Only type not sent to D365" +
            "")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("ExportedToAccounting")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        public void NonCorcentricInvoiceOfFinancialHandlingReportingOnlyTypeNotSentToD365()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "ExportedToAccounting",
                    "QAFunctional",
                    "DMS"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non Corcentric Invoice of financial handling Reporting Only type not sent to D365" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1221
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1222
 testRunner.Given("Fleet \"byrShFinRep\" Credit Limit is Updated to 999999", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1223
 testRunner.When("Invoice is submitted from DMS with Fleet \"byrShFinRep\" and Dealer \"SupShFinRep\" w" +
                        "ith transaction amount 100 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1224
 testRunner.Then("Exported To Accounting should be \"False\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non Corcentric Invoice of financial handling Community type not sent to D365")]
        [NUnit.Framework.CategoryAttribute("CON-22288")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("InvoiceSubmission")]
        [NUnit.Framework.CategoryAttribute("ExportedToAccounting")]
        [NUnit.Framework.CategoryAttribute("QAFunctional")]
        [NUnit.Framework.CategoryAttribute("DMS")]
        public void NonCorcentricInvoiceOfFinancialHandlingCommunityTypeNotSentToD365()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-22288",
                    "Functional",
                    "Smoke",
                    "18.0",
                    "InvoiceSubmission",
                    "ExportedToAccounting",
                    "QAFunctional",
                    "DMS"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non Corcentric Invoice of financial handling Community type not sent to D365", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1230
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 1231
 testRunner.Given("Fleet \"byrShFinCom\" Credit Limit is Updated to 999999", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1232
 testRunner.When("Invoice is submitted from DMS with Fleet \"byrShFinCom\" and Dealer \"SupShFinCom\" w" +
                        "ith transaction amount 100 and quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1233
 testRunner.Then("Exported To Accounting should be \"False\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
