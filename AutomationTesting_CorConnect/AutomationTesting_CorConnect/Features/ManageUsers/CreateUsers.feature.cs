// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationTesting_CorConnect.Features.ManageUsers
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Create Users")]
    public partial class CreateUsersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CreateUsers.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/ManageUsers", "Create Users", "validate fields visible on  user creation form and create different types of  use" +
                    "rs ", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("User \"Admin\" is on \"Manage Users\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GUI validation of Add New User Page for all types of users")]
        [NUnit.Framework.CategoryAttribute("CON-26334")]
        [NUnit.Framework.CategoryAttribute("CON-26182")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CON-26733")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.TestCaseAttribute("Regular Users", "Dealer", null)]
        [NUnit.Framework.TestCaseAttribute("Regular Users", "Fleet", null)]
        [NUnit.Framework.TestCaseAttribute("Entity Admin", "Dealer", null)]
        [NUnit.Framework.TestCaseAttribute("Entity Admin", "Fleet", null)]
        [NUnit.Framework.TestCaseAttribute("Community Admin", "", null)]
        [NUnit.Framework.TestCaseAttribute("Super Admin", "", null)]
        public void GUIValidationOfAddNewUserPageForAllTypesOfUsers(string usertype, string entitytype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-26334",
                    "CON-26182",
                    "19.0",
                    "CON-26733",
                    "Smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("usertype", usertype);
            argumentsOfScenario.Add("entitytype", entitytype);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GUI validation of Add New User Page for all types of users", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 10
 testRunner.When(string.Format("Open Add New User page and select the User Type \"{0}\" and Entity Type \"{1}\"", usertype, entitytype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then(string.Format("Valid fields should be displayed on Add New User page for \"{0}\" and \"{1}\"", usertype, entitytype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create users of different types and languages")]
        [NUnit.Framework.CategoryAttribute("CON-26334")]
        [NUnit.Framework.CategoryAttribute("CON-26182")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CON-26735")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        public void CreateUsersOfDifferentTypesAndLanguages()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26334",
                    "CON-26182",
                    "19.0",
                    "CON-26735",
                    "Functional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create users of different types and languages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserType",
                            "EntityType",
                            "LocType",
                            "Language"});
                table15.AddRow(new string[] {
                            "Regular Users",
                            "Dealer",
                            "Shop",
                            "English"});
                table15.AddRow(new string[] {
                            "Regular Users",
                            "Fleet",
                            "Billing",
                            "French"});
                table15.AddRow(new string[] {
                            "Entity Admin",
                            "Dealer",
                            "Shop",
                            "Spanish"});
                table15.AddRow(new string[] {
                            "Entity Admin",
                            "Fleet",
                            "Billing",
                            "English"});
                table15.AddRow(new string[] {
                            "Entity Admin",
                            "Dealer",
                            "Subcommunity",
                            "Spanish"});
                table15.AddRow(new string[] {
                            "Entity Admin",
                            "Fleet",
                            "Subcommunity",
                            "French"});
                table15.AddRow(new string[] {
                            "Super Admin",
                            "",
                            "",
                            "French"});
                table15.AddRow(new string[] {
                            "Community Admin",
                            "",
                            "",
                            "Spanish"});
#line 26
 testRunner.When("Create new user:", ((string)(null)), table15, "When ");
#line hidden
#line 36
 testRunner.Then("user is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create notification users of different types and languages")]
        [NUnit.Framework.CategoryAttribute("CON-26334")]
        [NUnit.Framework.CategoryAttribute("CON-26182")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CON-26737")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        public void CreateNotificationUsersOfDifferentTypesAndLanguages()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26334",
                    "CON-26182",
                    "19.0",
                    "CON-26737",
                    "Functional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create notification users of different types and languages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserType",
                            "EntityType",
                            "LocType",
                            "Language"});
                table16.AddRow(new string[] {
                            "Regular Users",
                            "Dealer",
                            "Billing",
                            "English"});
                table16.AddRow(new string[] {
                            "Regular Users",
                            "Fleet",
                            "Shop",
                            "Spanish"});
                table16.AddRow(new string[] {
                            "Entity Admin",
                            "Dealer",
                            "Shop",
                            "French"});
                table16.AddRow(new string[] {
                            "Entity Admin",
                            "Fleet",
                            "Billing",
                            "English"});
                table16.AddRow(new string[] {
                            "Entity Admin",
                            "Dealer",
                            "Subcommunity",
                            "Spanish"});
                table16.AddRow(new string[] {
                            "Entity Admin",
                            "Fleet",
                            "Subcommunity",
                            "French"});
                table16.AddRow(new string[] {
                            "Super Admin",
                            "",
                            "",
                            "French"});
                table16.AddRow(new string[] {
                            "Community Admin",
                            "",
                            "",
                            "Spanish"});
#line 43
 testRunner.When("Create new Notification user:", ((string)(null)), table16, "When ");
#line hidden
#line 53
 testRunner.Then("Notification user is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
