// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationTesting_CorConnect.Features.ManageUsers
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UpdateUsers")]
    public partial class UpdateUsersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "UpdateUsers.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/ManageUsers", "UpdateUsers", "Validate fields visible on  Edit User page and Update fields different types of  " +
                    "users ", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
testRunner.Given("User \"Admin\" is on \"Manage Users\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GUI validation of Edit New User Page for all types of users")]
        [NUnit.Framework.CategoryAttribute("CON-26334")]
        [NUnit.Framework.CategoryAttribute("CON-26182")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CON-26734")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.TestCaseAttribute("SuppRegularUser", "Regular Users", "Dealer", null)]
        [NUnit.Framework.TestCaseAttribute("BuyrRegularUser", "Regular Users", "Fleet", null)]
        [NUnit.Framework.TestCaseAttribute("SupEntAdminUser", "Entity Admin", "Dealer", null)]
        [NUnit.Framework.TestCaseAttribute("ByrEntAdminUser", "Entity Admin", "Fleet", null)]
        [NUnit.Framework.TestCaseAttribute("SuperAdminUser", "Super Admin", "", null)]
        [NUnit.Framework.TestCaseAttribute("CommAdminUser", "Community Admin", "", null)]
        public void GUIValidationOfEditNewUserPageForAllTypesOfUsers(string username, string usertype, string entitytype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-26334",
                    "CON-26182",
                    "19.0",
                    "CON-26734",
                    "Smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("username", username);
            argumentsOfScenario.Add("usertype", usertype);
            argumentsOfScenario.Add("entitytype", entitytype);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GUI validation of Edit New User Page for all types of users", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 12
testRunner.When(string.Format("User navigates to Edit User Page for \"{0}\"", username), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
testRunner.Then(string.Format("On Edit page valid fields are displayed for \"{0}\" and \"{1}\"", usertype, entitytype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update all fields for different Users")]
        [NUnit.Framework.CategoryAttribute("CON-26334")]
        [NUnit.Framework.CategoryAttribute("CON-26182")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CON-26786")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.TestCaseAttribute("SuppRegularUser", "Regular Users", "Dealer", null)]
        [NUnit.Framework.TestCaseAttribute("BuyrRegularUser", "Regular Users", "Fleet", null)]
        [NUnit.Framework.TestCaseAttribute("SupEntAdminUser", "Entity Admin", "Dealer", null)]
        [NUnit.Framework.TestCaseAttribute("ByrEntAdminUser", "Entity Admin", "Fleet", null)]
        [NUnit.Framework.TestCaseAttribute("SuperAdminUser", "Super Admin", "", null)]
        [NUnit.Framework.TestCaseAttribute("CommAdminUser", "Community Admin", "", null)]
        public void UpdateAllFieldsForDifferentUsers(string username, string usertype, string entitytype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-26334",
                    "CON-26182",
                    "19.0",
                    "CON-26786",
                    "Functional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("username", username);
            argumentsOfScenario.Add("usertype", usertype);
            argumentsOfScenario.Add("entitytype", entitytype);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update all fields for different Users", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 26
testRunner.When(string.Format("Update all editable fields for User \"{0}\" on Edit User Page", username), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
testRunner.Then(string.Format("User \"{0}\" of user type <User Type> and entity type <Entity Type> is updated", username), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
