// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationTesting_CorConnect.Features.CreditLimit
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CreditLimitStatus")]
    public partial class CreditLimitStatusFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CreditLimitStatus.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/CreditLimit", "CreditLimitStatus", "A short summary of the feature", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("User \"Admin\" logs in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.And("Token \"EnableCreditLimitToCorSymphony\" is \"Active\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Updated Credit Limit data is staged on Auth Submission")]
        [NUnit.Framework.CategoryAttribute("CON-26496")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CreditLimitStatus")]
        [NUnit.Framework.CategoryAttribute("CON-27485")]
        public void ValidateUpdatedCreditLimitDataIsStagedOnAuthSubmission()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26496",
                    "Functional",
                    "19.0",
                    "CreditLimitStatus",
                    "CON-27485"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Updated Credit Limit data is staged on Auth Submission", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "CreditAmount",
                            "ActionType",
                            "TransactionAmount",
                            "BYR",
                            "SUP"});
                table1.AddRow(new string[] {
                            "500",
                            "Create Authorization",
                            "400",
                            "CLFleet1",
                            "CLDealer1"});
#line 10
 testRunner.Given("Credit Limit and Available credit limit is updated", ((string)(null)), table1, "Given ");
#line hidden
#line 13
 testRunner.When("Job \"CorSymphony_Producer_CreditStatus\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then("Updated CreditAmount, AvailableCredit and TotalAR values should be placed in stag" +
                        "ing history table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Updated Credit Limit data is staged on Invoice Submission")]
        [NUnit.Framework.CategoryAttribute("CON-26496")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CreditLimitStatus")]
        [NUnit.Framework.CategoryAttribute("CON-27486")]
        public void ValidateUpdatedCreditLimitDataIsStagedOnInvoiceSubmission()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26496",
                    "Functional",
                    "19.0",
                    "CreditLimitStatus",
                    "CON-27486"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Updated Credit Limit data is staged on Invoice Submission", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "CreditAmount",
                            "ActionType",
                            "TransactionAmount",
                            "BYR",
                            "SUP"});
                table2.AddRow(new string[] {
                            "600",
                            "Create Invoice",
                            "250",
                            "CLFleet1",
                            "CLDealer1"});
#line 18
 testRunner.Given("Credit Limit and Available credit limit is updated", ((string)(null)), table2, "Given ");
#line hidden
#line 21
 testRunner.When("Job \"CorSymphony_Producer_CreditStatus\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("Updated CreditAmount, AvailableCredit and TotalAR values should be placed in stag" +
                        "ing history table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Updated Credit Limit data is staged on Invoice Reversal")]
        [NUnit.Framework.CategoryAttribute("CON-26496")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CreditLimitStatus")]
        [NUnit.Framework.CategoryAttribute("CON-27487")]
        public void ValidateUpdatedCreditLimitDataIsStagedOnInvoiceReversal()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26496",
                    "Functional",
                    "19.0",
                    "CreditLimitStatus",
                    "CON-27487"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Updated Credit Limit data is staged on Invoice Reversal", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 26
 testRunner.Given("User navigates to \"Dealer Invoices\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "CreditAmount",
                            "ActionType",
                            "BYR",
                            "SUP"});
                table3.AddRow(new string[] {
                            "700",
                            "Invoice Reversal",
                            "CLFleet1",
                            "CLDealer1"});
#line 27
 testRunner.And("Credit Limit and Available credit limit is updated", ((string)(null)), table3, "And ");
#line hidden
#line 30
 testRunner.When("Job \"CorSymphony_Producer_CreditStatus\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.Then("Updated CreditAmount, AvailableCredit and TotalAR values should be placed in stag" +
                        "ing history table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Credit Limit data is staged when Credit Limit is Increased")]
        [NUnit.Framework.CategoryAttribute("CON-26496")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CreditLimitStatus")]
        [NUnit.Framework.CategoryAttribute("CON-27490")]
        public void ValidateCreditLimitDataIsStagedWhenCreditLimitIsIncreased()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26496",
                    "Functional",
                    "19.0",
                    "CreditLimitStatus",
                    "CON-27490"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Credit Limit data is staged when Credit Limit is Increased", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 35
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "CreditAmount",
                            "ActionType",
                            "TransactionAmount",
                            "BYR",
                            "SUP"});
                table4.AddRow(new string[] {
                            "700",
                            "Credit Limit is Increased",
                            "1000",
                            "CLFleet1",
                            "CLDealer1"});
#line 36
 testRunner.And("Credit Limit and Available credit limit is updated", ((string)(null)), table4, "And ");
#line hidden
#line 39
 testRunner.When("Job \"CorSymphony_Producer_CreditStatus\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("Updated CreditAmount, AvailableCredit and TotalAR values should be placed in stag" +
                        "ing history table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Credit Limit data is staged when Credit Limit is Descreased")]
        [NUnit.Framework.CategoryAttribute("CON-26496")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CreditLimitStatus")]
        [NUnit.Framework.CategoryAttribute("CON-27491")]
        public void ValidateCreditLimitDataIsStagedWhenCreditLimitIsDescreased()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26496",
                    "Functional",
                    "19.0",
                    "CreditLimitStatus",
                    "CON-27491"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Credit Limit data is staged when Credit Limit is Descreased", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 44
 testRunner.Given("User navigates to \"Update Credit\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "CreditAmount",
                            "ActionType",
                            "TransactionAmount",
                            "BYR",
                            "SUP"});
                table5.AddRow(new string[] {
                            "700",
                            "Credit Limit is Descreased",
                            "400",
                            "CLFleet1",
                            "CLDealer1"});
#line 45
 testRunner.And("Credit Limit and Available credit limit is updated", ((string)(null)), table5, "And ");
#line hidden
#line 48
 testRunner.When("Job \"CorSymphony_Producer_CreditStatus\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
 testRunner.Then("Updated CreditAmount, AvailableCredit and TotalAR values should be placed in stag" +
                        "ing history table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Credit Limit data is staged when New Buyer Account is Created")]
        [NUnit.Framework.CategoryAttribute("CON-26496")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CreditLimitStatus")]
        [NUnit.Framework.CategoryAttribute("CON-27492")]
        public void ValidateCreditLimitDataIsStagedWhenNewBuyerAccountIsCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26496",
                    "Functional",
                    "19.0",
                    "CreditLimitStatus",
                    "CON-27492"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Credit Limit data is staged when New Buyer Account is Created", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 53
 testRunner.Given("User navigates to \"Create New Entity\" popup page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "ActionType"});
                table6.AddRow(new string[] {
                            "New BYR Created"});
#line 54
 testRunner.And("Credit Limit and Available credit limit is updated", ((string)(null)), table6, "And ");
#line hidden
#line 57
 testRunner.When("Job \"CorSymphony_Producer_CreditStatus\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.Then("Updated CreditAmount, AvailableCredit and TotalAR values should be placed in stag" +
                        "ing history table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Updated Credit Limit records with negative AvailCredit is staged on Auth" +
            " Submission")]
        [NUnit.Framework.CategoryAttribute("CON-26496")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CreditLimitStatus")]
        [NUnit.Framework.CategoryAttribute("CON-27493")]
        public void ValidateUpdatedCreditLimitRecordsWithNegativeAvailCreditIsStagedOnAuthSubmission()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26496",
                    "Functional",
                    "19.0",
                    "CreditLimitStatus",
                    "CON-27493"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Updated Credit Limit records with negative AvailCredit is staged on Auth" +
                    " Submission", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 63
 testRunner.Given("CreditLimitVarianceThreshHoldPct is set to \"50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "CreditAmount",
                            "ActionType",
                            "TransactionAmount",
                            "BYR",
                            "SUP"});
                table7.AddRow(new string[] {
                            "500",
                            "Negative AvailCredit on Create Auth",
                            "700",
                            "CLFleet1",
                            "CLDealer1"});
#line 64
 testRunner.And("Credit Limit and Available credit limit is updated", ((string)(null)), table7, "And ");
#line hidden
#line 67
 testRunner.When("Job \"CorSymphony_Producer_CreditStatus\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
 testRunner.Then("Updated CreditAmount, AvailableCredit and TotalAR values should be placed in stag" +
                        "ing history table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Updated Credit Limit records with negative AvailCredit is staged on Invo" +
            "ice Submission")]
        [NUnit.Framework.CategoryAttribute("CON-26496")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CreditLimitStatus")]
        [NUnit.Framework.CategoryAttribute("CON-27494")]
        public void ValidateUpdatedCreditLimitRecordsWithNegativeAvailCreditIsStagedOnInvoiceSubmission()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26496",
                    "Functional",
                    "19.0",
                    "CreditLimitStatus",
                    "CON-27494"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Updated Credit Limit records with negative AvailCredit is staged on Invo" +
                    "ice Submission", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 73
 testRunner.Given("CreditLimitVarianceThreshHoldPct is set to \"50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "CreditAmount",
                            "ActionType",
                            "TransactionAmount",
                            "BYR",
                            "SUP"});
                table8.AddRow(new string[] {
                            "600",
                            "Negative AvailCredit on Create Inv",
                            "250",
                            "CLFleet1",
                            "CLDealer1"});
#line 74
 testRunner.And("Credit Limit and Available credit limit is updated", ((string)(null)), table8, "And ");
#line hidden
#line 77
 testRunner.When("Job \"CorSymphony_Producer_CreditStatus\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.Then("Updated CreditAmount, AvailableCredit and TotalAR values should be placed in stag" +
                        "ing history table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify record with only latest credit update is placed in staging history table")]
        [NUnit.Framework.CategoryAttribute("CON-26496")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CreditLimitStatus")]
        [NUnit.Framework.CategoryAttribute("CON-27495")]
        public void VerifyRecordWithOnlyLatestCreditUpdateIsPlacedInStagingHistoryTable()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26496",
                    "Functional",
                    "19.0",
                    "CreditLimitStatus",
                    "CON-27495"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify record with only latest credit update is placed in staging history table", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "CreditAmount",
                            "ActionType",
                            "TransactionAmount",
                            "BYR",
                            "SUP"});
                table9.AddRow(new string[] {
                            "500",
                            "Create Authorization",
                            "400",
                            "CLFleet1",
                            "CLDealer1"});
#line 82
 testRunner.Given("Credit Limit and Available credit limit is updated", ((string)(null)), table9, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "CreditAmount",
                            "ActionType",
                            "TransactionAmount",
                            "BYR",
                            "SUP"});
                table10.AddRow(new string[] {
                            "600",
                            "Create Invoice",
                            "250",
                            "CLFleet1",
                            "CLDealer1"});
#line 85
 testRunner.And("Credit Limit and Available credit limit is updated", ((string)(null)), table10, "And ");
#line hidden
#line 88
 testRunner.When("Job \"CorSymphony_Producer_CreditStatus\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
 testRunner.Then("Only Latest Updated CreditAmount, AvailableCredit and TotalAR values should be pl" +
                        "aced in staging history table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Active but terminated records having updated credit limit are placed in " +
            "staging history table")]
        [NUnit.Framework.CategoryAttribute("CON-26496")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CreditLimitStatus")]
        [NUnit.Framework.CategoryAttribute("CON-27496")]
        public void ValidateActiveButTerminatedRecordsHavingUpdatedCreditLimitArePlacedInStagingHistoryTable()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26496",
                    "Functional",
                    "19.0",
                    "CreditLimitStatus",
                    "CON-27496"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Active but terminated records having updated credit limit are placed in " +
                    "staging history table", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "CreditAmount",
                            "ActionType",
                            "TransactionAmount",
                            "BYR",
                            "SUP"});
                table11.AddRow(new string[] {
                            "500",
                            "Create Authorization",
                            "400",
                            "CLFleet2",
                            "CLDealer2"});
#line 93
 testRunner.Given("Credit Limit and Available credit limit is updated", ((string)(null)), table11, "Given ");
#line hidden
#line 96
 testRunner.And("Entity \"CLFleet2\" is set to \"Terminated\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.When("Job \"CorSymphony_Producer_CreditStatus\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
 testRunner.Then("Updated CreditAmount, AvailableCredit and TotalAR values should be placed in stag" +
                        "ing history table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate inactive records having updated credit limit are placed in staging histo" +
            "ry table")]
        [NUnit.Framework.CategoryAttribute("CON-26496")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CreditLimitStatus")]
        [NUnit.Framework.CategoryAttribute("CON-27497")]
        public void ValidateInactiveRecordsHavingUpdatedCreditLimitArePlacedInStagingHistoryTable()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26496",
                    "Functional",
                    "19.0",
                    "CreditLimitStatus",
                    "CON-27497"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate inactive records having updated credit limit are placed in staging histo" +
                    "ry table", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "CreditAmount",
                            "ActionType",
                            "TransactionAmount",
                            "BYR",
                            "SUP"});
                table12.AddRow(new string[] {
                            "500",
                            "Create Auth & Inactivate Account",
                            "300",
                            "CLFleet2",
                            "CLDealer2"});
#line 102
 testRunner.Given("Credit Limit and Available credit limit is updated", ((string)(null)), table12, "Given ");
#line hidden
#line 105
 testRunner.And("Entity \"CLFleet2\" is set to \"InActive\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.When("Job \"CorSymphony_Producer_CreditStatus\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
 testRunner.Then("Updated CreditAmount, AvailableCredit and TotalAR values should be placed in stag" +
                        "ing history table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Active but Suspended records having updated credit limit are placed in s" +
            "taging history table")]
        [NUnit.Framework.CategoryAttribute("CON-26496")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CreditLimitStatus")]
        [NUnit.Framework.CategoryAttribute("CON-27498")]
        public void ValidateActiveButSuspendedRecordsHavingUpdatedCreditLimitArePlacedInStagingHistoryTable()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26496",
                    "Functional",
                    "19.0",
                    "CreditLimitStatus",
                    "CON-27498"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Active but Suspended records having updated credit limit are placed in s" +
                    "taging history table", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "CreditAmount",
                            "ActionType",
                            "TransactionAmount",
                            "BYR",
                            "SUP"});
                table13.AddRow(new string[] {
                            "500",
                            "Create Auth & Suspend Account",
                            "200",
                            "CLFleet3",
                            "CLDealer4"});
#line 111
 testRunner.Given("Credit Limit and Available credit limit is updated", ((string)(null)), table13, "Given ");
#line hidden
#line 114
 testRunner.And("Entity \"CLFleet3\" is set to \"Suspended\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.When("Job \"CorSymphony_Producer_CreditStatus\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
 testRunner.Then("Updated CreditAmount, AvailableCredit and TotalAR values should be placed in stag" +
                        "ing history table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Credit Limit data is staged when Auth is Used in Invoice Submission")]
        [NUnit.Framework.CategoryAttribute("CON-26496")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("CreditLimitStatus")]
        [NUnit.Framework.CategoryAttribute("CON-27499")]
        public void ValidateCreditLimitDataIsStagedWhenAuthIsUsedInInvoiceSubmission()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26496",
                    "Functional",
                    "19.0",
                    "CreditLimitStatus",
                    "CON-27499"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Credit Limit data is staged when Auth is Used in Invoice Submission", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "CreditAmount",
                            "ActionType",
                            "TransactionAmount",
                            "BYR",
                            "SUP"});
                table14.AddRow(new string[] {
                            "800",
                            "Use Auth in Inv",
                            "100",
                            "CLFleet1",
                            "CLDealer1"});
#line 120
 testRunner.Given("Credit Limit and Available credit limit is updated", ((string)(null)), table14, "Given ");
#line hidden
#line 123
 testRunner.When("Job \"CorSymphony_Producer_CreditStatus\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
 testRunner.Then("Updated CreditAmount, AvailableCredit and TotalAR values should be placed in stag" +
                        "ing history table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
