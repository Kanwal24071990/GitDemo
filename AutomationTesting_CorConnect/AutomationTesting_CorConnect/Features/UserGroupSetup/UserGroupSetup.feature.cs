// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationTesting_CorConnect.Features.UserGroupSetup
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UserGroupSetup")]
    public partial class UserGroupSetupFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "UserGroupSetup.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UserGroupSetup", "UserGroupSetup", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bulk Action function is accessible to user")]
        [NUnit.Framework.CategoryAttribute("CON-26867")]
        [NUnit.Framework.CategoryAttribute("UserGroupSetup")]
        [NUnit.Framework.CategoryAttribute("NoUAT")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions", "TestFullBulkAccess", null)]
        public void BulkActionFunctionIsAccessibleToUser(string functionName, string usergroup, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-26867",
                    "UserGroupSetup",
                    "NoUAT",
                    "Functional",
                    "20.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FunctionName", functionName);
            argumentsOfScenario.Add("Usergroup", usergroup);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bulk Action function is accessible to user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 9
 testRunner.Given("Username \"TestFullAccessUser\" is on \"User Group Setup\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.And(string.Format("User group - {0} have {1} function full access", usergroup, functionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.When("user \"TestFullAccessUser\" navigates to \"Bulk Actions\" page under Support Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then(string.Format("{0} pop up page should be loaded for the \"TestFullAccessUser\" user and submission" +
                            " is allowed", functionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ensure that Bulk Action page link is not visible in support menu")]
        [NUnit.Framework.CategoryAttribute("CON-26867")]
        [NUnit.Framework.CategoryAttribute("UserGroupSetup")]
        [NUnit.Framework.CategoryAttribute("NoUAT")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions", "TestGroupWithNoBulkAccess", null)]
        public void EnsureThatBulkActionPageLinkIsNotVisibleInSupportMenu(string functionName, string usergroup, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-26867",
                    "UserGroupSetup",
                    "NoUAT",
                    "Functional",
                    "20.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FunctionName", functionName);
            argumentsOfScenario.Add("Usergroup", usergroup);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure that Bulk Action page link is not visible in support menu", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 23
 testRunner.Given("Username \"TestNoAccessUser\" is on \"User Group Setup\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
 testRunner.And(string.Format("User group - {0} do not have {1} function access", usergroup, functionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.When("user \"TestNoAccessUser\" navigates to \"Bulk Actions\" page under Support Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then(string.Format("{0} menu item should not visible to \"TestNoAccessUser\" user under \"Support\" menu", functionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bulk Action function with readonly access to user")]
        [NUnit.Framework.CategoryAttribute("CON-26867")]
        [NUnit.Framework.CategoryAttribute("UserGroupSetup")]
        [NUnit.Framework.CategoryAttribute("NoUAT")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions", "TestFullBulkAccess", null)]
        public void BulkActionFunctionWithReadonlyAccessToUser(string functionName, string usergroup, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-26867",
                    "UserGroupSetup",
                    "NoUAT",
                    "Functional",
                    "20.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FunctionName", functionName);
            argumentsOfScenario.Add("Usergroup", usergroup);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bulk Action function with readonly access to user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 36
 testRunner.Given("Username \"TestReadOnlyAccessUser\" is on \"User Group Setup\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
 testRunner.And(string.Format("User group - {0} have {1} function readonly access", usergroup, functionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.When("user \"TestReadOnlyAccessUser\" navigates to \"Bulk Actions\" page under Support Menu" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.Then(string.Format("{0} pop up page should be loaded for \"TestReadOnlyAccessUser\" user with submissio" +
                            "n disabled", functionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bulk Action - sub function is accessible to user")]
        [NUnit.Framework.CategoryAttribute("CON-26867")]
        [NUnit.Framework.CategoryAttribute("UserGroupSetup")]
        [NUnit.Framework.CategoryAttribute("NoUAT")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Dispute Creation", "TestFullBulkAccess", null)]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Invoice Update", "TestFullBulkAccess", null)]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Invoice Reversal", "TestFullBulkAccess", null)]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Resend Invoices", "TestFullBulkAccess", null)]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Update Credit", "TestFullBulkAccess", null)]
        public void BulkAction_SubFunctionIsAccessibleToUser(string bulkActionChildFunctions, string usergroup, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-26867",
                    "UserGroupSetup",
                    "NoUAT",
                    "Functional",
                    "20.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("BulkActionChildFunctions", bulkActionChildFunctions);
            argumentsOfScenario.Add("Usergroup", usergroup);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bulk Action - sub function is accessible to user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 48
 testRunner.Given("Username \"TestFullAccessUser\" is on \"User Group Setup\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 49
 testRunner.And(string.Format("User group - {0} have {1} function full access", usergroup, bulkActionChildFunctions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.When("user \"TestFullAccessUser\" navigates to \"Bulk Actions\" page under Support Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
 testRunner.Then(string.Format("\"Bulk Actions\" pop up page should be loaded for the \"TestFullAccessUser\" user and" +
                            " submission is allowed for {0}", bulkActionChildFunctions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bulk Action - sub function with readonly access to user")]
        [NUnit.Framework.CategoryAttribute("CON-26867")]
        [NUnit.Framework.CategoryAttribute("UserGroupSetup")]
        [NUnit.Framework.CategoryAttribute("NoUAT")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Dispute Creation", "ChildFunctionsWIthReadOnlyAccess", null)]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Invoice Update", "ChildFunctionsWIthReadOnlyAccess", null)]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Invoice Reversal", "ChildFunctionsWIthReadOnlyAccess", null)]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Resend Invoices", "ChildFunctionsWIthReadOnlyAccess", null)]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Update Credit", "ChildFunctionsWIthReadOnlyAccess", null)]
        public void BulkAction_SubFunctionWithReadonlyAccessToUser(string bulkActionChildFunctions, string usergroup, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-26867",
                    "UserGroupSetup",
                    "NoUAT",
                    "Functional",
                    "20.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("BulkActionChildFunctions", bulkActionChildFunctions);
            argumentsOfScenario.Add("Usergroup", usergroup);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bulk Action - sub function with readonly access to user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 64
 testRunner.Given("Username \"TestReadOnlyChildUser\" is on \"User Group Setup\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
 testRunner.And(string.Format("User group - {0} have {1} function readonly access", usergroup, bulkActionChildFunctions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.When("user \"TestReadOnlyChildUser\" navigates to \"Bulk Actions\" page under Support Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.Then(string.Format("\"Bulk Actions\" pop up page should be loaded for \"TestReadOnlyAccessUser\" user wit" +
                            "h submission disabled for {0}", bulkActionChildFunctions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bulk Action - sub function is not accessible to user")]
        [NUnit.Framework.CategoryAttribute("CON-26867")]
        [NUnit.Framework.CategoryAttribute("UserGroupSetup")]
        [NUnit.Framework.CategoryAttribute("NoUAT")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("20.0")]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Dispute Creation", "RestrictChildFunctionAccess", null)]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Invoice Update", "RestrictChildFunctionAccess", null)]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Invoice Reversal", "RestrictChildFunctionAccess", null)]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Resend Invoices", "RestrictChildFunctionAccess", null)]
        [NUnit.Framework.TestCaseAttribute("Bulk Actions - Update Credit", "RestrictChildFunctionAccess", null)]
        public void BulkAction_SubFunctionIsNotAccessibleToUser(string bulkActionChildFunctions, string usergroup, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-26867",
                    "UserGroupSetup",
                    "NoUAT",
                    "Functional",
                    "20.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("BulkActionChildFunctions", bulkActionChildFunctions);
            argumentsOfScenario.Add("Usergroup", usergroup);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bulk Action - sub function is not accessible to user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 80
 testRunner.Given("Username \"TestRestrictChildAccessUser\" is on \"User Group Setup\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 81
 testRunner.And(string.Format("User group - {0} do not have {1} function access", usergroup, bulkActionChildFunctions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
 testRunner.When("user \"TestRestrictChildAccessUser\" navigates to \"Bulk Actions\" page under Support" +
                        " Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
 testRunner.Then(string.Format("\"Bulk Action\" pop up page should be loaded for \"TestRestrictChildAccessUser\" user" +
                            " without {0} in the dropdown", bulkActionChildFunctions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
