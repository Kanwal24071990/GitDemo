// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationTesting_CorConnect.Features.DealerInvoiceTransactionLookup
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DealerInvoiceTransactionLookup")]
    public partial class DealerInvoiceTransactionLookupFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "DealerInvoiceTransactionLookup.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/DealerInvoiceTransactionLookup", "DealerInvoiceTransactionLookup", "As a User\r\nI want to verify DateRange dropdown options\r\nI want to verify Search b" +
                    "y all options of DateRange dropdown", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line hidden
#line 9
 testRunner.Given("User \"Admin\" is on \"Dealer Invoice Transaction Lookup\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify DateRange dropdown values on DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifyDateRangeDropdownValuesOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify DateRange dropdown values on DealerInvoiceTransactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 15
    testRunner.Then("Dropdown \"Date Range\" should have valid values on \"Dealer Invoice Transaction Loo" +
                        "kup\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Search By DateRange Dropdown When Value is Last 7 Days on DealerInvoiceTra" +
            "nsactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifySearchByDateRangeDropdownWhenValueIsLast7DaysOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Search By DateRange Dropdown When Value is Last 7 Days on DealerInvoiceTra" +
                    "nsactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 19
 testRunner.When("Advanced Search by DateRange value \"Last 7 days\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then("Data for \"Last 7 days\" is shown on the results grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Search By DateRange Dropdown When Value is Last 14 Days on DealerInvoiceTr" +
            "ansactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifySearchByDateRangeDropdownWhenValueIsLast14DaysOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Search By DateRange Dropdown When Value is Last 14 Days on DealerInvoiceTr" +
                    "ansactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 25
 testRunner.When("Advanced Search by DateRange value \"Last 14 days\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then("Data for \"Last 14 days\" is shown on the results grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Search By DateRange Dropdown When Value is Last 185 Days on DealerInvoiceT" +
            "ransactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifySearchByDateRangeDropdownWhenValueIsLast185DaysOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Search By DateRange Dropdown When Value is Last 185 Days on DealerInvoiceT" +
                    "ransactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 30
 testRunner.When("Advanced Search by DateRange value \"Last 185 days\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.Then("Data for \"Last 185 days\" is shown on the results grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Search By DateRange Dropdown When Value is Current month on DealerInvoiceT" +
            "ransactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifySearchByDateRangeDropdownWhenValueIsCurrentMonthOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Search By DateRange Dropdown When Value is Current month on DealerInvoiceT" +
                    "ransactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 35
 testRunner.When("Advanced Search by DateRange value \"Current month\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.Then("Data for \"Current month\" is shown on the results grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Search By DateRange Dropdown When Value is Last month on DealerInvoiceTran" +
            "sactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifySearchByDateRangeDropdownWhenValueIsLastMonthOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Search By DateRange Dropdown When Value is Last month on DealerInvoiceTran" +
                    "sactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 40
 testRunner.When("Advanced Search by DateRange value \"Last month\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.Then("Data for \"Last month\" is shown on the results grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Search By DateRange Dropdown When Value is Customized date on DealerInvoic" +
            "eTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifySearchByDateRangeDropdownWhenValueIsCustomizedDateOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Search By DateRange Dropdown When Value is Customized date on DealerInvoic" +
                    "eTransactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 45
 testRunner.When("Advanced Search by DateRange value \"Customized date\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.Then("Data for \"Customized date\" is shown on the results grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the Last 185 days date range message on Advanced Search on DealerInvoiceTr" +
            "ansactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("UAT")]
        public void VerifyTheLast185DaysDateRangeMessageOnAdvancedSearchOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0",
                    "UAT"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the Last 185 days date range message on Advanced Search on DealerInvoiceTr" +
                    "ansactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 50
 testRunner.When("User navigates to Advanced Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
 testRunner.Then("The message \"Advanced Search will only allow 185 days date range\" is shown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the Date Range message when user selects FROM date greater than 185 days o" +
            "n DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("UAT")]
        public void VerifyTheDateRangeMessageWhenUserSelectsFROMDateGreaterThan185DaysOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0",
                    "UAT"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the Date Range message when user selects FROM date greater than 185 days o" +
                    "n DealerInvoiceTransactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 55
 testRunner.When("User selects From date greater than 185 days on Advanced Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.Then("The message Date Range cannot exceed 185 days is shown as a tooltip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that selecting Last 7 days date range option sets the correct From and To " +
            "dates on DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifyThatSelectingLast7DaysDateRangeOptionSetsTheCorrectFromAndToDatesOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that selecting Last 7 days date range option sets the correct From and To " +
                    "dates on DealerInvoiceTransactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 60
 testRunner.When("User selects \"Last 7 days\" from DateRange dropdown on Advanced Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.Then("The From Date and To Date are set correctly for the \"Last 7 days\" option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that selecting Last 14 days date range option sets the correct From and To" +
            " dates on DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifyThatSelectingLast14DaysDateRangeOptionSetsTheCorrectFromAndToDatesOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that selecting Last 14 days date range option sets the correct From and To" +
                    " dates on DealerInvoiceTransactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 65
 testRunner.When("User selects \"Last 14 days\" from DateRange dropdown on Advanced Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.Then("The From Date and To Date are set correctly for the \"Last 14 days\" option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that selecting Last 185 days date range option sets the correct From and T" +
            "o dates on DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        [NUnit.Framework.CategoryAttribute("UAT")]
        public void VerifyThatSelectingLast185DaysDateRangeOptionSetsTheCorrectFromAndToDatesOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0",
                    "UAT"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that selecting Last 185 days date range option sets the correct From and T" +
                    "o dates on DealerInvoiceTransactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 70
 testRunner.When("User selects \"Last 185 days\" from DateRange dropdown on Advanced Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
 testRunner.Then("The From Date and To Date are set correctly for the \"Last 185 days\" option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that selecting Current month date range option sets the correct From and T" +
            "o dates on DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifyThatSelectingCurrentMonthDateRangeOptionSetsTheCorrectFromAndToDatesOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that selecting Current month date range option sets the correct From and T" +
                    "o dates on DealerInvoiceTransactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 75
 testRunner.When("User selects \"Current month\" from DateRange dropdown on Advanced Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
 testRunner.Then("The From Date and To Date are set correctly for the \"Current month\" option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that selecting Last month date range option sets the correct From and To d" +
            "ates on DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifyThatSelectingLastMonthDateRangeOptionSetsTheCorrectFromAndToDatesOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that selecting Last month date range option sets the correct From and To d" +
                    "ates on DealerInvoiceTransactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 80
 testRunner.When("User selects \"Last month\" from DateRange dropdown on Advanced Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("The From Date and To Date are set correctly for the \"Last month\" option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that selecting Customized date date range option sets the correct From and" +
            " To dates on DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("DealerInvoiceTransactionLookup")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifyThatSelectingCustomizedDateDateRangeOptionSetsTheCorrectFromAndToDatesOnDealerInvoiceTransactionLookup()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "DealerInvoiceTransactionLookup",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that selecting Customized date date range option sets the correct From and" +
                    " To dates on DealerInvoiceTransactionLookup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 85
 testRunner.When("User selects \"Customized date\" from DateRange dropdown on Advanced Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
 testRunner.Then("The From Date and To Date are set correctly for the \"Customized date\" option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
