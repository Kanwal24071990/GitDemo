// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationTesting_CorConnect.Features.AccountMaintenance
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AccountMaintenance")]
    public partial class AccountMaintenanceFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "AccountMaintenance.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/AccountMaintenance", "AccountMaintenance", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
 testRunner.Given("User \"Admin\" is on \"Account Maintenance\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Account Configuration GUI fields and values for Buyer Location")]
        [NUnit.Framework.CategoryAttribute("CON-26179")]
        [NUnit.Framework.CategoryAttribute("CON-26500")]
        [NUnit.Framework.CategoryAttribute("AccountMaintenance")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.TestCaseAttribute("Master Billing", null)]
        [NUnit.Framework.TestCaseAttribute("Billing", null)]
        [NUnit.Framework.TestCaseAttribute("Master", null)]
        [NUnit.Framework.TestCaseAttribute("Shop", null)]
        [NUnit.Framework.TestCaseAttribute("Parent Shop", null)]
        public void ValidateAccountConfigurationGUIFieldsAndValuesForBuyerLocation(string locationType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-26179",
                    "CON-26500",
                    "AccountMaintenance",
                    "Smoke",
                    "Functional",
                    "19.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("LocationType", locationType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Account Configuration GUI fields and values for Buyer Location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 10
 testRunner.When(string.Format("User is on \"Account Configuration\" tab for Enrollment Type \"Buyer\" and  {0}", locationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then(string.Format("Valid fields with default values should displayed for {0} on \"Account Configurati" +
                            "on\" tab", locationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update fleet billing location as non pay online account")]
        [NUnit.Framework.CategoryAttribute("CON-26500")]
        [NUnit.Framework.CategoryAttribute("Update")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        public void UpdateFleetBillingLocationAsNonPayOnlineAccount()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-26500",
                    "Update",
                    "Smoke",
                    "Functional",
                    "19.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update fleet billing location as non pay online account", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 24
 testRunner.When("\"Buyer Billing\" Location is updated to non pay online account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then("\"Buyer Billing\" Location is updated to non pay online successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Add New Location GUI fields and values for Buyer Location")]
        [NUnit.Framework.CategoryAttribute("CON-26500")]
        [NUnit.Framework.CategoryAttribute("AccountMaintenance")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.TestCaseAttribute("Shop", null)]
        [NUnit.Framework.TestCaseAttribute("Parent Shop", null)]
        public void ValidateAddNewLocationGUIFieldsAndValuesForBuyerLocation(string locationType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-26500",
                    "AccountMaintenance",
                    "Smoke",
                    "Functional",
                    "19.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("LocationType", locationType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Add New Location GUI fields and values for Buyer Location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 31
 testRunner.When(string.Format("User is on \"Account Configuration\" tab for Enrollment Type \"Buyer\" and {0}", locationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.And("User switches to \"New Locations\" tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.Then(string.Format("Valid fields with default values should displayed for {0} on \"New Locations\" tab", locationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Data Saved for Tax ID Type and Tax Classification Fields on Account Config" +
            "uration Page for Buyer Location")]
        [NUnit.Framework.CategoryAttribute("CON-26179")]
        [NUnit.Framework.CategoryAttribute("AccountMaintenance")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("19.0")]
        [NUnit.Framework.CategoryAttribute("AdditionalTaxFields")]
        [NUnit.Framework.TestCaseAttribute("Master Billing", null)]
        [NUnit.Framework.TestCaseAttribute("Billing", null)]
        [NUnit.Framework.TestCaseAttribute("Master", null)]
        [NUnit.Framework.TestCaseAttribute("Shop", null)]
        [NUnit.Framework.TestCaseAttribute("Parent Shop", null)]
        public void VerifyDataSavedForTaxIDTypeAndTaxClassificationFieldsOnAccountConfigurationPageForBuyerLocation(string locationType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CON-26179",
                    "AccountMaintenance",
                    "Smoke",
                    "Functional",
                    "19.0",
                    "AdditionalTaxFields"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("LocationType", locationType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Data Saved for Tax ID Type and Tax Classification Fields on Account Config" +
                    "uration Page for Buyer Location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 43
 testRunner.When(string.Format("User is on \"Account Configuration\" tab for Enrollment Type \"Buyer\" and  {0}", locationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.And(string.Format("User Updates data for in Tax ID Type and Tax Classification Fields for \"Buyer\" an" +
                            "d  \"{0}\"", locationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.Then("Data should be saved in Tax ID Type and Tax Classification Fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
