// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationTesting_CorConnect.Features.PartPurchasesReport
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PartPurchasesReport")]
    public partial class PartPurchasesReportFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "PartPurchasesReport.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/PartPurchasesReport", "PartPurchasesReport", "As a User\r\nI want to verify DateRange dropdown options\r\nI want to verify Search b" +
                    "y all options of DateRange dropdown", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
#line 8
 testRunner.Given("User \"Admin\" is on pop-up page \"Part Purchases Report\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify DateRange dropdown values on PartPurchasesReport")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("PartPurchasesReport")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifyDateRangeDropdownValuesOnPartPurchasesReport()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "PartPurchasesReport",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify DateRange dropdown values on PartPurchasesReport", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 14
    testRunner.Then("Dropdown \"Date Range\" should have valid values on pop-up \"Part Purchases Report\" " +
                        "page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Search By DateRange Dropdown When Value is Last 7 Days on PartPurchasesRep" +
            "ort")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("PartPurchasesReport")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifySearchByDateRangeDropdownWhenValueIsLast7DaysOnPartPurchasesReport()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "PartPurchasesReport",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Search By DateRange Dropdown When Value is Last 7 Days on PartPurchasesRep" +
                    "ort", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 18
 testRunner.When("Search by DateRange value \"Last 7 days\" for selected dealer \"18AutoDlr\" and fleet" +
                        " \"18AutoFlt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then("Data for \"Last 7 days\" is shown on the results grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Search By DateRange Dropdown When Value is Current Quarter on PartPurchase" +
            "sReport")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("PartPurchasesReport")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifySearchByDateRangeDropdownWhenValueIsCurrentQuarterOnPartPurchasesReport()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "PartPurchasesReport",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Search By DateRange Dropdown When Value is Current Quarter on PartPurchase" +
                    "sReport", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 24
 testRunner.When("Search by DateRange value \"Current Quarter\" for selected dealer \"18AutoDlr\" and f" +
                        "leet \"18AutoFlt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then("Data for \"Current Quarter\" is shown on the results grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Search By DateRange Dropdown When Value is Last 185 Days on PartPurchasesR" +
            "eport")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("PartPurchasesReport")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifySearchByDateRangeDropdownWhenValueIsLast185DaysOnPartPurchasesReport()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "PartPurchasesReport",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Search By DateRange Dropdown When Value is Last 185 Days on PartPurchasesR" +
                    "eport", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 29
 testRunner.When("Search by DateRange value \"Last 185 days\" for selected dealer \"18AutoDlr\" and fle" +
                        "et \"18AutoFlt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then("Data for \"Last 185 days\" is shown on the results grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Search By DateRange Dropdown When Value is Current month on PartPurchasesR" +
            "eport")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("PartPurchasesReport")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifySearchByDateRangeDropdownWhenValueIsCurrentMonthOnPartPurchasesReport()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "PartPurchasesReport",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Search By DateRange Dropdown When Value is Current month on PartPurchasesR" +
                    "eport", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 34
 testRunner.When("Search by DateRange value \"Current month\" for selected dealer \"18AutoDlr\" and fle" +
                        "et \"18AutoFlt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.Then("Data for \"Current month\" is shown on the results grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Search By DateRange Dropdown When Value is Last 12 months on PartPurchases" +
            "Report")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("SearchByDateRange")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifySearchByDateRangeDropdownWhenValueIsLast12MonthsOnPartPurchasesReport()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "SearchByDateRange",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Search By DateRange Dropdown When Value is Last 12 months on PartPurchases" +
                    "Report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 39
 testRunner.When("Search by DateRange value \"Last 12 months\" for selected dealer \"18AutoDlr\" and fl" +
                        "eet \"18AutoFlt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("Data for \"Last 12 months\" is shown on the results grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Search By DateRange Dropdown When Value is Customized date on PartPurchase" +
            "sReport")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("PartPurchasesReport")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifySearchByDateRangeDropdownWhenValueIsCustomizedDateOnPartPurchasesReport()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "PartPurchasesReport",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Search By DateRange Dropdown When Value is Customized date on PartPurchase" +
                    "sReport", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 44
 testRunner.When("Search by DateRange value \"Customized date\" for selected dealer \"18AutoDlr\" and f" +
                        "leet \"18AutoFlt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
 testRunner.Then("Data for \"Customized date\" is shown on the results grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Search By DateRange Dropdown When Value is YTD on PartPurchasesReport")]
        [NUnit.Framework.CategoryAttribute("CON-20036")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("PartPurchasesReport")]
        [NUnit.Framework.CategoryAttribute("18.0")]
        public void VerifySearchByDateRangeDropdownWhenValueIsYTDOnPartPurchasesReport()
        {
            string[] tagsOfScenario = new string[] {
                    "CON-20036",
                    "Functional",
                    "Smoke",
                    "PartPurchasesReport",
                    "18.0"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Search By DateRange Dropdown When Value is YTD on PartPurchasesReport", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 49
 testRunner.When("Search by DateRange value \"YTD\" for selected dealer \"18AutoDlr\" and fleet \"18Auto" +
                        "Flt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Then("Data for \"YTD\" is shown on the results grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
